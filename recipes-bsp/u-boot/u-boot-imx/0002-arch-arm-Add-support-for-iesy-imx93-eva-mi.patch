From f1a62df56a4a337cfaaeaf7ba16c8e4333ca73b4 Mon Sep 17 00:00:00 2001
From: Dominik Poggel <pog@iesy.com>
Date: Fri, 9 Aug 2024 14:53:05 +0200
Subject: [PATCH 2/2] arch: arm: Add support for iesy-imx93-eva-mi

Signed-off-by: Dominik Poggel <pog@iesy.com>
---
 arch/arm/dts/Makefile                         |    1 +
 arch/arm/dts/iesy-imx93-eva-mi-u-boot.dtsi    |  202 +++
 arch/arm/dts/iesy-imx93-eva-mi.dts            |  658 +++++++
 arch/arm/mach-imx/imx9/Kconfig                |    7 +
 board/iesy/iesy_imx93_eva_mi/Kconfig          |   12 +
 board/iesy/iesy_imx93_eva_mi/MAINTAINERS      |    7 +
 board/iesy/iesy_imx93_eva_mi/Makefile         |   12 +
 .../iesy_imx93_eva_mi/iesy_imx93_eva_mi.c     |  405 +++++
 board/iesy/iesy_imx93_eva_mi/lpddr4_timing.c  | 1545 +++++++++++++++++
 board/iesy/iesy_imx93_eva_mi/spl.c            |  188 ++
 configs/iesy_imx93_eva_mi_defconfig           |  190 ++
 include/configs/iesy_imx93_eva_mi.h           |  187 ++
 12 files changed, 3414 insertions(+)
 create mode 100644 arch/arm/dts/iesy-imx93-eva-mi-u-boot.dtsi
 create mode 100644 arch/arm/dts/iesy-imx93-eva-mi.dts
 create mode 100644 board/iesy/iesy_imx93_eva_mi/Kconfig
 create mode 100644 board/iesy/iesy_imx93_eva_mi/MAINTAINERS
 create mode 100644 board/iesy/iesy_imx93_eva_mi/Makefile
 create mode 100644 board/iesy/iesy_imx93_eva_mi/iesy_imx93_eva_mi.c
 create mode 100644 board/iesy/iesy_imx93_eva_mi/lpddr4_timing.c
 create mode 100644 board/iesy/iesy_imx93_eva_mi/spl.c
 create mode 100644 configs/iesy_imx93_eva_mi_defconfig
 create mode 100644 include/configs/iesy_imx93_eva_mi.h

diff --git a/arch/arm/dts/Makefile b/arch/arm/dts/Makefile
index 8aab6abdbc2..4cec7310e9b 100644
--- a/arch/arm/dts/Makefile
+++ b/arch/arm/dts/Makefile
@@ -1086,6 +1086,7 @@ dtb-$(CONFIG_ARCH_IMX8M) += \
 	imx8mq-librem5-r4.dtb
 
 dtb-$(CONFIG_ARCH_IMX9) += \
+	iesy-imx93-eva-mi.dtb \
 	imx95-19x19-evk.dtb \
 	imx95-19x19-titan.dtb \
 	imx93-11x11-evk.dtb \
diff --git a/arch/arm/dts/iesy-imx93-eva-mi-u-boot.dtsi b/arch/arm/dts/iesy-imx93-eva-mi-u-boot.dtsi
new file mode 100644
index 00000000000..d85e6d69b41
--- /dev/null
+++ b/arch/arm/dts/iesy-imx93-eva-mi-u-boot.dtsi
@@ -0,0 +1,202 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+/ {
+	wdt-reboot {
+		compatible = "wdt-reboot";
+		wdt = <&wdog3>;
+		u-boot,dm-spl;
+	};
+
+	aliases {
+		usbgadget0 = &usbg1;
+		usbgadget1 = &usbg2;
+	};
+
+	usbg1: usbg1 {
+		compatible = "fsl,imx27-usb-gadget";
+		dr_mode = "peripheral";
+		chipidea,usb = <&usbotg1>;
+		status = "okay";
+	};
+
+	usbg2: usbg2 {
+		compatible = "fsl,imx27-usb-gadget";
+		dr_mode = "peripheral";
+		chipidea,usb = <&usbotg2>;
+		status = "okay";
+	};
+
+	firmware {
+		optee {
+			compatible = "linaro,optee-tz";
+			method = "smc";
+		};
+	};
+};
+
+&{/soc@0} {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&aips1 {
+	u-boot,dm-spl;
+	u-boot,dm-pre-reloc;
+};
+
+&aips2 {
+	u-boot,dm-spl;
+};
+
+&aips3 {
+	u-boot,dm-spl;
+};
+
+&iomuxc {
+	u-boot,dm-spl;
+};
+
+&reg_usdhc2_vmmc {
+	u-boot,off-on-delay-us = <20000>;
+	u-boot,dm-spl;
+};
+
+&pinctrl_reg_usdhc2_vmmc {
+	u-boot,dm-spl;
+};
+
+&pinctrl_uart1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2_gpio {
+	u-boot,dm-spl;
+};
+
+&pinctrl_usdhc2 {
+	u-boot,dm-spl;
+};
+
+&gpio1 {
+	u-boot,dm-spl;
+};
+
+&gpio2 {
+	u-boot,dm-spl;
+};
+
+&gpio3 {
+	u-boot,dm-spl;
+};
+
+&gpio4 {
+	u-boot,dm-spl;
+};
+
+&lpuart1 {
+	u-boot,dm-spl;
+};
+
+&usdhc1 {
+	u-boot,dm-spl;
+};
+
+&usdhc2 {
+	u-boot,dm-spl;
+	fsl,signal-voltage-switch-extra-delay-ms = <8>;
+};
+
+&lpi2c1 {
+	u-boot,dm-spl;
+};
+
+&lpi2c2 {
+	u-boot,dm-spl;
+};
+
+&lpi2c3 {
+	u-boot,dm-spl;
+};
+
+&{/soc@0/bus@44000000/i2c@44350000/pmic@25} {
+	u-boot,dm-spl;
+};
+
+&{/soc@0/bus@44000000/i2c@44350000/pmic@25/regulators} {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c1 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c2 {
+	u-boot,dm-spl;
+};
+
+&pinctrl_lpi2c3 {
+	u-boot,dm-spl;
+};
+
+&fec {
+	phy-reset-gpios = <&pcal6524 16 GPIO_ACTIVE_LOW>;
+	phy-reset-duration = <15>;
+	phy-reset-post-delay = <100>;
+};
+
+&ethphy1 {
+	reset-gpios = <&pcal6524 15 GPIO_ACTIVE_LOW>;
+	reset-assert-us = <15000>;
+	reset-deassert-us = <100000>;
+};
+
+&usbotg1 {
+	status = "okay";
+	extcon = <&ptn5110>;
+};
+
+&usbotg2 {
+	status = "okay";
+	extcon = <&ptn5110_2>;
+};
+
+&s4muap {
+	u-boot,dm-spl;
+	status = "okay";
+};
+
+&clk {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+	/delete-property/ assigned-clocks;
+	/delete-property/ assigned-clock-rates;
+	/delete-property/ assigned-clock-parents;
+};
+
+&osc_32k {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&osc_24m {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&clk_ext1 {
+	u-boot,dm-pre-reloc;
+	u-boot,dm-spl;
+};
+
+&lcdif {
+	assigned-clocks = <&clk IMX93_CLK_MEDIA_AXI>, <&clk IMX93_CLK_MEDIA_APB>;
+	assigned-clock-parents = <&clk IMX93_CLK_SYS_PLL_PFD1>, <&clk IMX93_CLK_SYS_PLL_PFD1_DIV2>;
+	assigned-clock-rates = <400000000>, <133333334>;
+};
diff --git a/arch/arm/dts/iesy-imx93-eva-mi.dts b/arch/arm/dts/iesy-imx93-eva-mi.dts
new file mode 100644
index 00000000000..fb1b32c474a
--- /dev/null
+++ b/arch/arm/dts/iesy-imx93-eva-mi.dts
@@ -0,0 +1,658 @@
+// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
+/*
+ * Copyright 2022 NXP
+ */
+
+/dts-v1/;
+
+#include "imx93.dtsi"
+
+/ {
+	model = "iesy i.MX93 EVA MI (Eval Kit)";
+	compatible = "fsl,imx93-11x11-evk", "fsl,imx93";
+
+	aliases {
+		rtc0 = &pcf2131;
+	 };
+
+	chosen {
+		bootargs = "console=ttyLP0,115200";
+		stdout-path = &lpuart1;
+	};
+
+	reserved-memory {
+		#address-cells = <2>;
+		#size-cells = <2>;
+		ranges;
+
+		linux,cma {
+			compatible = "shared-dma-pool";
+			reusable;
+			alloc-ranges = <0 0x80000000 0 0x40000000>;
+			size = <0 0x10000000>;
+			linux,cma-default;
+		};
+	};
+
+	reg_can2_stby: regulator-can2-stby {
+		compatible = "regulator-fixed";
+		regulator-name = "can2-stby";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&adp5585gpio 5 GPIO_ACTIVE_LOW>;
+		enable-active-low;
+	};
+
+	reg_usdhc2_vmmc: regulator-usdhc2 {
+		compatible = "regulator-fixed";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_reg_usdhc2_vmmc>;
+		regulator-name = "VSD_3V3";
+		regulator-min-microvolt = <3300000>;
+		regulator-max-microvolt = <3300000>;
+		gpio = <&gpio3 7 GPIO_ACTIVE_HIGH>;
+		off-on-delay-us = <12000>;
+		enable-active-high;
+	};
+
+	reg_vdd_12v: regulator-vdd-12v {
+		compatible = "regulator-fixed";
+		regulator-name = "reg_vdd_12v";
+		regulator-min-microvolt = <12000000>;
+		regulator-max-microvolt = <12000000>;
+		gpio = <&pcal6524 14 GPIO_ACTIVE_HIGH>;
+		enable-active-high;
+	};
+
+	reg_vref_1v8: regulator-adc-vref {
+		compatible = "regulator-fixed";
+		regulator-name = "vref_1v8";
+		regulator-min-microvolt = <1800000>;
+		regulator-max-microvolt = <1800000>;
+	};
+
+	usdhc3_pwrseq: usdhc3_pwrseq {
+		compatible = "mmc-pwrseq-simple";
+		reset-gpios = <&pcal6524 20 GPIO_ACTIVE_LOW>;
+	};
+
+dsi_host: dsi-host {
+		compatible = "synopsys,dw-mipi-dsi";
+		status = "okay";
+	};
+
+	rm67199_panel {
+		compatible = "raydium,rm67199";
+		reset-gpio = <&adp5585gpio 6 GPIO_ACTIVE_LOW>;
+		dsi-lanes = <4>;
+		video-mode = <2>;	/* 0: burst mode
+					 * 1: non-burst mode with sync event
+					 * 2: non-burst mode with sync pulse
+					 */
+		width-mm = <68>;
+		height-mm = <121>;
+		status = "okay";
+
+		port {
+			panel_in: endpoint {
+				remote-endpoint = <&dsi_out>;
+			};
+		};
+	};
+};
+
+&dphy {
+	status = "okay";
+};
+
+&dsi {
+	status = "okay";
+
+	ports {
+		port@1 {
+			dsi_to_adv7535: endpoint {
+				remote-endpoint = <&adv7535_to_dsi>;
+			};
+		};
+
+		port@2 {
+			dsi_out: endpoint {
+				remote-endpoint = <&panel_in>;
+			};
+		};
+	};
+};
+
+&eqos {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_eqos>;
+	phy-mode = "rgmii-id";
+	phy-handle = <&ethphy1>;
+	status = "okay";
+
+	mdio {
+		compatible = "snps,dwmac-mdio";
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clock-frequency = <5000000>;
+
+		ethphy1: ethernet-phy@1 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <1>;
+			eee-broken-1000t;
+		};
+	};
+};
+
+&fec {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_fec>;
+	phy-mode = "rgmii-id";
+	phy-handle = <&ethphy2>;
+	fsl,magic-packet;
+	status = "okay";
+
+	mdio {
+		#address-cells = <1>;
+		#size-cells = <0>;
+		clock-frequency = <5000000>;
+
+		ethphy2: ethernet-phy@2 {
+			compatible = "ethernet-phy-ieee802.3-c22";
+			reg = <2>;
+			eee-broken-1000t;
+		};
+	};
+};
+
+&lcdif {
+	status = "okay";
+	assigned-clock-rates = <484000000>, <121000000>, <400000000>, <133333333>;
+};
+
+&lpi2c1 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c1>;
+	pinctrl-1 = <&pinctrl_lpi2c1>;
+	status = "okay";
+
+	adv7535: hdmi@3d {
+		compatible = "adi,adv7535";
+		reg = <0x3d>;
+		adi,addr-cec = <0x3c>;
+		adi,dsi-lanes = <4>;
+		status = "okay";
+
+		port {
+			adv7535_to_dsi: endpoint {
+				remote-endpoint = <&dsi_to_adv7535>;
+			};
+		};
+	};
+};
+
+&lpi2c2 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c2>;
+	pinctrl-1 = <&pinctrl_lpi2c2>;
+	status = "okay";
+
+	pmic@25 {
+		compatible = "nxp,pca9451a";
+		reg = <0x25>;
+		interrupt-parent = <&pcal6524>;
+		interrupts = <11 IRQ_TYPE_LEVEL_LOW>;
+
+		regulators {
+			buck1: BUCK1 {
+				regulator-name = "BUCK1";
+				regulator-min-microvolt = <650000>;
+				regulator-max-microvolt = <2237500>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <3125>;
+			};
+
+			buck2: BUCK2 {
+				regulator-name = "BUCK2";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <2187500>;
+				regulator-boot-on;
+				regulator-always-on;
+				regulator-ramp-delay = <3125>;
+			};
+
+			buck4: BUCK4{
+				regulator-name = "BUCK4";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			buck5: BUCK5{
+				regulator-name = "BUCK5";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			buck6: BUCK6 {
+				regulator-name = "BUCK6";
+				regulator-min-microvolt = <600000>;
+				regulator-max-microvolt = <3400000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo1: LDO1 {
+				regulator-name = "LDO1";
+				regulator-min-microvolt = <1600000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo4: LDO4 {
+				regulator-name = "LDO4";
+				regulator-min-microvolt = <800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+
+			ldo5: LDO5 {
+				regulator-name = "LDO5";
+				regulator-min-microvolt = <1800000>;
+				regulator-max-microvolt = <3300000>;
+				regulator-boot-on;
+				regulator-always-on;
+			};
+		};
+	};
+
+	pcal6524: gpio@22 {
+		compatible = "nxp,pcal6524";
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_pcal6524>;
+		reg = <0x22>;
+		gpio-controller;
+		#gpio-cells = <2>;
+		interrupt-controller;
+		#interrupt-cells = <2>;
+		interrupt-parent = <&gpio3>;
+		interrupts = <27 IRQ_TYPE_LEVEL_LOW>;
+	};
+
+	adp5585gpio: gpio@34 {
+		compatible = "adp5585";
+		reg = <0x34>;
+		gpio-controller;
+		#gpio-cells = <2>;
+	};
+};
+
+&lpi2c3 {
+	#address-cells = <1>;
+	#size-cells = <0>;
+	clock-frequency = <400000>;
+	pinctrl-names = "default", "sleep";
+	pinctrl-0 = <&pinctrl_lpi2c3>;
+	pinctrl-1 = <&pinctrl_lpi2c3>;
+	status = "okay";
+
+	pcf2131: rtc@53 {
+		compatible = "nxp,pcf2131";
+		reg = <0x53>;
+		interrupt-parent = <&pcal6524>;
+		interrupts = <1 IRQ_TYPE_LEVEL_LOW>;
+		status = "okay";
+	};
+
+	ptn5110: tcpc@50 {
+		compatible = "nxp,ptn5110";
+		reg = <0x50>;
+		interrupt-parent = <&pcal6524>;
+		interrupts = <1 IRQ_TYPE_EDGE_FALLING>;
+		status = "okay";
+
+		port {
+			typec1_dr_sw: endpoint {
+				remote-endpoint = <&usb1_drd_sw>;
+			};
+		};
+
+		typec1_con: connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			data-role = "dual";
+			try-power-role = "sink";
+			source-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)>;
+			sink-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)
+				     PDO_VAR(5000, 20000, 3000)>;
+			op-sink-microwatt = <15000000>;
+			self-powered;
+		};
+	};
+
+	ptn5110_2: tcpc@51 {
+		compatible = "nxp,ptn5110";
+		reg = <0x51>;
+		interrupt-parent = <&pcal6524>;
+		interrupts = <9 IRQ_TYPE_EDGE_FALLING>;
+		status = "okay";
+
+		port {
+			typec2_dr_sw: endpoint {
+				remote-endpoint = <&usb2_drd_sw>;
+			};
+		};
+
+		typec2_con: connector {
+			compatible = "usb-c-connector";
+			label = "USB-C";
+			power-role = "dual";
+			data-role = "dual";
+			try-power-role = "sink";
+			source-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)>;
+			sink-pdos = <PDO_FIXED(5000, 3000, PDO_FIXED_USB_COMM)
+				     PDO_VAR(5000, 20000, 3000)>;
+			op-sink-microwatt = <15000000>;
+			self-powered;
+		};
+	};
+};
+
+&lpuart1 { /* console */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1>;
+	status = "okay";
+};
+
+&usbotg1 {
+	dr_mode = "otg";
+	hnp-disable;
+	srp-disable;
+	adp-disable;
+	usb-role-switch;
+	disable-over-current;
+	samsung,picophy-pre-emp-curr-control = <3>;
+	samsung,picophy-dc-vol-level-adjust = <7>;
+	status = "okay";
+
+	port {
+		usb1_drd_sw: endpoint {
+			remote-endpoint = <&typec1_dr_sw>;
+		};
+	};
+};
+
+&usbotg2 {
+	dr_mode = "otg";
+	hnp-disable;
+	srp-disable;
+	adp-disable;
+	usb-role-switch;
+	disable-over-current;
+	samsung,picophy-pre-emp-curr-control = <3>;
+	samsung,picophy-dc-vol-level-adjust = <7>;
+	status = "okay";
+
+	port {
+		usb2_drd_sw: endpoint {
+			remote-endpoint = <&typec2_dr_sw>;
+		};
+	};
+};
+
+&usdhc1 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc1>;
+	pinctrl-1 = <&pinctrl_usdhc1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc1_200mhz>;
+	bus-width = <8>;
+	non-removable;
+	status = "okay";
+};
+
+&usdhc2 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc2>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-1 = <&pinctrl_usdhc2_100mhz>, <&pinctrl_usdhc2_gpio>;
+	pinctrl-2 = <&pinctrl_usdhc2_200mhz>, <&pinctrl_usdhc2_gpio>;
+	cd-gpios = <&gpio3 00 GPIO_ACTIVE_LOW>;
+	vmmc-supply = <&reg_usdhc2_vmmc>;
+	bus-width = <4>;
+	status = "okay";
+	no-sdio;
+	no-mmc;
+};
+
+&usdhc3 {
+	status = "disabled";
+};
+
+
+
+&flexspi1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexspi>;
+	assigned-clock-rates = <80000000>;
+	status = "okay";
+
+	flash0: flash@0 {
+		reg = <0>;
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "jedec,spi-nor";
+		spi-max-frequency = <80000000>;
+		spi-tx-bus-width = <4>;
+		spi-rx-bus-width = <4>;
+	};
+};
+
+&iomuxc {
+	pinctrl_flexcan2: flexcan2grp {
+		fsl,pins = <
+			MX93_PAD_GPIO_IO25__CAN2_TX	0x139e
+			MX93_PAD_GPIO_IO27__CAN2_RX	0x139e
+		>;
+	};
+
+	pinctrl_lpi2c1: lpi2c1grp {
+		fsl,pins = <
+			MX93_PAD_I2C1_SCL__LPI2C1_SCL			0x40000b9e
+			MX93_PAD_I2C1_SDA__LPI2C1_SDA			0x40000b9e
+		>;
+	};
+
+	pinctrl_lpi2c2: lpi2c2grp {
+		fsl,pins = <
+			MX93_PAD_I2C2_SCL__LPI2C2_SCL			0x40000b9e
+			MX93_PAD_I2C2_SDA__LPI2C2_SDA			0x40000b9e
+		>;
+	};
+
+	pinctrl_pcal6524: pcal6524grp {
+		fsl,pins = <
+			MX93_PAD_CCM_CLKO2__GPIO3_IO27			0x31e
+		>;
+	};
+
+	pinctrl_eqos: eqosgrp {
+		fsl,pins = <
+			MX93_PAD_ENET1_MDC__ENET_QOS_MDC			0x57e
+			MX93_PAD_ENET1_MDIO__ENET_QOS_MDIO			0x57e
+			MX93_PAD_ENET1_RD0__ENET_QOS_RGMII_RD0			0x57e
+			MX93_PAD_ENET1_RD1__ENET_QOS_RGMII_RD1			0x57e
+			MX93_PAD_ENET1_RD2__ENET_QOS_RGMII_RD2			0x57e
+			MX93_PAD_ENET1_RD3__ENET_QOS_RGMII_RD3			0x57e
+			MX93_PAD_ENET1_RXC__CCM_ENET_QOS_CLOCK_GENERATE_RX_CLK	0x5fe
+			MX93_PAD_ENET1_RX_CTL__ENET_QOS_RGMII_RX_CTL		0x57e
+			MX93_PAD_ENET1_TD0__ENET_QOS_RGMII_TD0			0x57e
+			MX93_PAD_ENET1_TD1__ENET_QOS_RGMII_TD1			0x57e
+			MX93_PAD_ENET1_TD2__ENET_QOS_RGMII_TD2			0x57e
+			MX93_PAD_ENET1_TD3__ENET_QOS_RGMII_TD3			0x57e
+			MX93_PAD_ENET1_TXC__CCM_ENET_QOS_CLOCK_GENERATE_TX_CLK	0x5fe
+			MX93_PAD_ENET1_TX_CTL__ENET_QOS_RGMII_TX_CTL		0x57e
+		>;
+	};
+
+	pinctrl_flexspi: flexspigrp {
+		fsl,pins = <
+			MX93_PAD_SD3_CMD__FLEXSPI1_A_SS0_B      0x3fe
+			MX93_PAD_SD3_CLK__FLEXSPI1_A_SCLK       0x3fe
+			MX93_PAD_SD3_DATA0__FLEXSPI1_A_DATA00   0x3fe
+			MX93_PAD_SD3_DATA1__FLEXSPI1_A_DATA01   0x3fe
+			MX93_PAD_SD3_DATA2__FLEXSPI1_A_DATA02   0x3fe
+			MX93_PAD_SD3_DATA3__FLEXSPI1_A_DATA03   0x3fe
+		>;
+	};
+
+	pinctrl_lpi2c3: lpi2c3grp {
+		fsl,pins = <
+			MX93_PAD_GPIO_IO28__LPI2C3_SDA			0x40000b9e
+			MX93_PAD_GPIO_IO29__LPI2C3_SCL			0x40000b9e
+		>;
+	};
+
+	pinctrl_fec: fecgrp {
+		fsl,pins = <
+			MX93_PAD_ENET2_MDC__ENET1_MDC			0x57e
+			MX93_PAD_ENET2_MDIO__ENET1_MDIO			0x57e
+			MX93_PAD_ENET2_RD0__ENET1_RGMII_RD0		0x57e
+			MX93_PAD_ENET2_RD1__ENET1_RGMII_RD1		0x57e
+			MX93_PAD_ENET2_RD2__ENET1_RGMII_RD2		0x57e
+			MX93_PAD_ENET2_RD3__ENET1_RGMII_RD3		0x57e
+			MX93_PAD_ENET2_RXC__ENET1_RGMII_RXC		0x5fe
+			MX93_PAD_ENET2_RX_CTL__ENET1_RGMII_RX_CTL	0x57e
+			MX93_PAD_ENET2_TD0__ENET1_RGMII_TD0		0x57e
+			MX93_PAD_ENET2_TD1__ENET1_RGMII_TD1		0x57e
+			MX93_PAD_ENET2_TD2__ENET1_RGMII_TD2		0x57e
+			MX93_PAD_ENET2_TD3__ENET1_RGMII_TD3		0x57e
+			MX93_PAD_ENET2_TXC__ENET1_RGMII_TXC		0x5fe
+			MX93_PAD_ENET2_TX_CTL__ENET1_RGMII_TX_CTL	0x57e
+		>;
+	};
+
+	pinctrl_uart1: uart1grp {
+		fsl,pins = <
+			MX93_PAD_UART1_RXD__LPUART1_RX			0x31e
+			MX93_PAD_UART1_TXD__LPUART1_TX			0x31e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1: usdhc1grp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x1582
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x40001382
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x40001382
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x40001382
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x40001382
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x40001382
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x40001382
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x40001382
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x40001382
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x40001382
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x1582
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1_100mhz: usdhc1-100mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x158e
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x4000138e
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x4000138e
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x4000138e
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x4000138e
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x4000138e
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x4000138e
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x4000138e
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x4000138e
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x4000138e
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x158e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc1_200mhz: usdhc1-200mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD1_CLK__USDHC1_CLK		0x15fe
+			MX93_PAD_SD1_CMD__USDHC1_CMD		0x400013fe
+			MX93_PAD_SD1_DATA0__USDHC1_DATA0	0x400013fe
+			MX93_PAD_SD1_DATA1__USDHC1_DATA1	0x400013fe
+			MX93_PAD_SD1_DATA2__USDHC1_DATA2	0x400013fe
+			MX93_PAD_SD1_DATA3__USDHC1_DATA3	0x400013fe
+			MX93_PAD_SD1_DATA4__USDHC1_DATA4	0x400013fe
+			MX93_PAD_SD1_DATA5__USDHC1_DATA5	0x400013fe
+			MX93_PAD_SD1_DATA6__USDHC1_DATA6	0x400013fe
+			MX93_PAD_SD1_DATA7__USDHC1_DATA7	0x400013fe
+			MX93_PAD_SD1_STROBE__USDHC1_STROBE	0x15fe
+		>;
+	};
+
+	pinctrl_reg_usdhc2_vmmc: regusdhc2vmmcgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_RESET_B__GPIO3_IO07	0x31e
+		>;
+	};
+
+	pinctrl_usdhc2_gpio: usdhc2gpiogrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CD_B__GPIO3_IO00		0x31e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2: usdhc2grp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x1582
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x40001382
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x40001382
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x40001382
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x40001382
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x40001382
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2_100mhz: usdhc2-100mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x158e
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x4000138e
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x4000138e
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x4000138e
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x4000138e
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x4000138e
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+
+	/* need to config the SION for data and cmd pad, refer to ERR052021 */
+	pinctrl_usdhc2_200mhz: usdhc2-200mhzgrp {
+		fsl,pins = <
+			MX93_PAD_SD2_CLK__USDHC2_CLK		0x15fe
+			MX93_PAD_SD2_CMD__USDHC2_CMD		0x400013fe
+			MX93_PAD_SD2_DATA0__USDHC2_DATA0	0x400013fe
+			MX93_PAD_SD2_DATA1__USDHC2_DATA1	0x400013fe
+			MX93_PAD_SD2_DATA2__USDHC2_DATA2	0x400013fe
+			MX93_PAD_SD2_DATA3__USDHC2_DATA3	0x400013fe
+			MX93_PAD_SD2_VSELECT__USDHC2_VSELECT	0x51e
+		>;
+	};
+};
+
+&wdog3 {
+	status = "okay";
+};
diff --git a/arch/arm/mach-imx/imx9/Kconfig b/arch/arm/mach-imx/imx9/Kconfig
index 2e306fa5add..b6bc14caa2a 100644
--- a/arch/arm/mach-imx/imx9/Kconfig
+++ b/arch/arm/mach-imx/imx9/Kconfig
@@ -56,6 +56,12 @@ config TARGET_IMX95_19X19_EVK
 	bool "imx95_19x19_evk"
 	select IMX95
 
+config TARGET_IESY_IMX93_EVA_MI
+	bool "iesy_imx93_eva_mi"
+	select OF_BOARD_FIXUP
+	select IMX93
+	select IMX9_LPDDR4X
+
 config TARGET_TITAN_IMX95_19X19
 	bool "imx95_titan_evk"
 	select IMX95
@@ -65,6 +71,7 @@ endchoice
 source "board/freescale/imx93_evk/Kconfig"
 source "board/freescale/imx93_qsb/Kconfig"
 source "board/freescale/imx95_evk/Kconfig"
+source "board/iesy/iesy_imx93_eva_mi/Kconfig"
 source "board/toradex/titan-imx95/Kconfig"
 
 endif
diff --git a/board/iesy/iesy_imx93_eva_mi/Kconfig b/board/iesy/iesy_imx93_eva_mi/Kconfig
new file mode 100644
index 00000000000..ea13fc6d049
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/Kconfig
@@ -0,0 +1,12 @@
+if TARGET_IESY_IMX93_EVA_MI
+
+config SYS_BOARD
+	default "iesy_imx93_eva_mi"
+
+config SYS_VENDOR
+	default "iesy"
+
+config SYS_CONFIG_NAME
+	default "iesy_imx93_eva_mi"
+
+endif
diff --git a/board/iesy/iesy_imx93_eva_mi/MAINTAINERS b/board/iesy/iesy_imx93_eva_mi/MAINTAINERS
new file mode 100644
index 00000000000..fec1d33be02
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/MAINTAINERS
@@ -0,0 +1,7 @@
+iesy i.MX93 EVA MI
+M:	Elia Funk <eli@iesy.com>
+M:  Dominik Poggel <pog@iesy.com>
+S:	Maintained
+F:	board/iesy/iesy_imx93_eva_mi/
+F:	include/configs/iesy_imx93_eva_mi.h
+F:	configs/iesy_imx93_eva_mi_defconfig
diff --git a/board/iesy/iesy_imx93_eva_mi/Makefile b/board/iesy/iesy_imx93_eva_mi/Makefile
new file mode 100644
index 00000000000..15251f853c1
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/Makefile
@@ -0,0 +1,12 @@
+#
+# Copyright 2022 NXP
+#
+# SPDX-License-Identifier:      GPL-2.0+
+#
+
+obj-y += iesy_imx93_eva_mi.o
+
+ifdef CONFIG_SPL_BUILD
+obj-y += spl.o
+obj-y += lpddr4_timing.o
+endif
diff --git a/board/iesy/iesy_imx93_eva_mi/iesy_imx93_eva_mi.c b/board/iesy/iesy_imx93_eva_mi/iesy_imx93_eva_mi.c
new file mode 100644
index 00000000000..2a448c5e194
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/iesy_imx93_eva_mi.c
@@ -0,0 +1,405 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+#include <common.h>
+#include <env.h>
+#include <efi_loader.h>
+#include <init.h>
+#include <miiphy.h>
+#include <netdev.h>
+#include <asm/global_data.h>
+#include <asm/arch-imx9/ccm_regs.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/arch-imx9/imx93_pins.h>
+#include <asm/arch/clock.h>
+#include <power/pmic.h>
+#include "../../freescale/common/tcpc.h"
+#include <dm/device.h>
+#include <dm/uclass.h>
+#include <usb.h>
+#include <dwc3-uboot.h>
+#include <asm/gpio.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define UART_PAD_CTRL	(PAD_CTL_DSE(6) | PAD_CTL_FSEL2)
+#define WDOG_PAD_CTRL	(PAD_CTL_DSE(6) | PAD_CTL_ODE | PAD_CTL_PUE | PAD_CTL_PE)
+
+static iomux_v3_cfg_t const uart_pads[] = {
+	MX93_PAD_UART1_RXD__LPUART1_RX | MUX_PAD_CTRL(UART_PAD_CTRL),
+	MX93_PAD_UART1_TXD__LPUART1_TX | MUX_PAD_CTRL(UART_PAD_CTRL),
+};
+
+#if CONFIG_IS_ENABLED(EFI_HAVE_CAPSULE_SUPPORT)
+#define IMX_BOOT_IMAGE_GUID \
+	EFI_GUID(0xbc550d86, 0xda26, 0x4b70, 0xac, 0x05, \
+		 0x2a, 0x44, 0x8e, 0xda, 0x6f, 0x21)
+
+struct efi_fw_image fw_images[] = {
+	{
+		.image_type_id = IMX_BOOT_IMAGE_GUID,
+		.fw_name = u"IMX93-11X11-EVK-RAW",
+		.image_index = 1,
+	},
+};
+
+struct efi_capsule_update_info update_info = {
+	.dfu_string = "mmc 0=flash-bin raw 0 0x2000 mmcpart 1",
+	.images = fw_images,
+};
+
+u8 num_image_type_guids = ARRAY_SIZE(fw_images);
+#endif /* EFI_HAVE_CAPSULE_SUPPORT */
+
+int board_early_init_f(void)
+{
+	imx_iomux_v3_setup_multiple_pads(uart_pads, ARRAY_SIZE(uart_pads));
+
+	init_uart_clk(LPUART1_CLK_ROOT);
+
+	return 0;
+}
+
+#ifdef CONFIG_USB_TCPC
+struct tcpc_port port1;
+struct tcpc_port port2;
+struct tcpc_port portpd;
+
+static int setup_pd_switch(uint8_t i2c_bus, uint8_t addr)
+{
+	struct udevice *bus;
+	struct udevice *i2c_dev = NULL;
+	int ret;
+	uint8_t valb;
+
+	ret = uclass_get_device_by_seq(UCLASS_I2C, i2c_bus, &bus);
+	if (ret) {
+		printf("%s: Can't find bus\n", __func__);
+		return -EINVAL;
+	}
+
+	ret = dm_i2c_probe(bus, addr, 0, &i2c_dev);
+	if (ret) {
+		printf("%s: Can't find device id=0x%x\n",
+			__func__, addr);
+		return -ENODEV;
+	}
+
+	ret = dm_i2c_read(i2c_dev, 0xB, &valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_read failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+	valb |= 0x4; /* Set DB_EXIT to exit dead battery mode */
+	ret = dm_i2c_write(i2c_dev, 0xB, (const uint8_t *)&valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_write failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	/* Set OVP threshold to 23V */
+	valb = 0x6;
+	ret = dm_i2c_write(i2c_dev, 0x8, (const uint8_t *)&valb, 1);
+	if (ret) {
+		printf("%s dm_i2c_write failed, err %d\n", __func__, ret);
+		return -EIO;
+	}
+
+	return 0;
+}
+
+int pd_switch_snk_enable(struct tcpc_port *port)
+{
+	if (port == &port1) {
+		debug("Setup pd switch on port 1\n");
+		return setup_pd_switch(2, 0x71);
+	} else if (port == &port2) {
+		debug("Setup pd switch on port 2\n");
+		return setup_pd_switch(2, 0x73);
+	} else
+		return -EINVAL;
+}
+
+struct tcpc_port_config portpd_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x52,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 20000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 15000,
+	.op_snk_mv = 9000,
+};
+
+struct tcpc_port_config port1_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x50,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 5000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 40000,
+	.op_snk_mv = 9000,
+	.switch_setup_func = &pd_switch_snk_enable,
+	.disable_pd = true,
+};
+
+struct tcpc_port_config port2_config = {
+	.i2c_bus = 2, /*i2c3*/
+	.addr = 0x51,
+	.port_type = TYPEC_PORT_UFP,
+	.max_snk_mv = 9000,
+	.max_snk_ma = 3000,
+	.max_snk_mw = 40000,
+	.op_snk_mv = 9000,
+	.switch_setup_func = &pd_switch_snk_enable,
+	.disable_pd = true,
+};
+
+static int setup_typec(void)
+{
+	int ret;
+
+	debug("tcpc_init port pd\n");
+	ret = tcpc_init(&portpd, portpd_config, NULL);
+	if (ret) {
+		printf("%s: tcpc portpd init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	debug("tcpc_init port 2\n");
+	ret = tcpc_init(&port2, port2_config, NULL);
+	if (ret) {
+		printf("%s: tcpc port2 init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	debug("tcpc_init port 1\n");
+	ret = tcpc_init(&port1, port1_config, NULL);
+	if (ret) {
+		printf("%s: tcpc port1 init failed, err=%d\n",
+		       __func__, ret);
+	}
+
+	return ret;
+}
+
+int board_usb_init(int index, enum usb_init_type init)
+{
+	int ret = 0;
+	struct tcpc_port *port_ptr;
+
+	debug("board_usb_init %d, type %d\n", index, init);
+
+	if (index == 0)
+		port_ptr = &port1;
+	else
+		port_ptr = &port2;
+
+	if (init == USB_INIT_HOST)
+		tcpc_setup_dfp_mode(port_ptr);
+	else
+		tcpc_setup_ufp_mode(port_ptr);
+
+	return ret;
+}
+
+int board_usb_cleanup(int index, enum usb_init_type init)
+{
+	int ret = 0;
+
+	debug("board_usb_cleanup %d, type %d\n", index, init);
+
+	if (init == USB_INIT_HOST) {
+		if (index == 0)
+			ret = tcpc_disable_src_vbus(&port1);
+		else
+			ret = tcpc_disable_src_vbus(&port2);
+	}
+
+	return ret;
+}
+
+int board_ehci_usb_phy_mode(struct udevice *dev)
+{
+	int ret = 0;
+	enum typec_cc_polarity pol;
+	enum typec_cc_state state;
+	struct tcpc_port *port_ptr;
+
+	debug("%s %d\n", __func__, dev_seq(dev));
+
+	if (dev_seq(dev) == 0)
+		port_ptr = &port1;
+	else
+		port_ptr = &port2;
+
+	tcpc_setup_ufp_mode(port_ptr);
+
+	ret = tcpc_get_cc_status(port_ptr, &pol, &state);
+
+	tcpc_print_log(port_ptr);
+	if (!ret) {
+		if (state == TYPEC_STATE_SRC_RD_RA || state == TYPEC_STATE_SRC_RD)
+			return USB_INIT_HOST;
+	}
+
+	return USB_INIT_DEVICE;
+}
+#endif
+
+static int setup_fec(void)
+{
+	return set_clk_enet(ENET_125MHZ);
+}
+
+int board_phy_config(struct phy_device *phydev)
+{
+	if (phydev->drv->config)
+		phydev->drv->config(phydev);
+
+	return 0;
+}
+
+static int setup_eqos(void)
+{
+	struct blk_ctrl_wakeupmix_regs *bctrl =
+		(struct blk_ctrl_wakeupmix_regs *)BLK_CTRL_WAKEUPMIX_BASE_ADDR;
+
+	if (!IS_ENABLED(CONFIG_TARGET_IMX93_14X14_EVK)) {
+		/* set INTF as RGMII, enable RGMII TXC clock */
+		clrsetbits_le32(&bctrl->eqos_gpr,
+				BCTRL_GPR_ENET_QOS_INTF_MODE_MASK,
+				BCTRL_GPR_ENET_QOS_INTF_SEL_RGMII | BCTRL_GPR_ENET_QOS_CLK_GEN_EN);
+
+		return set_clk_eqos(ENET_125MHZ);
+	}
+
+	return 0;
+}
+
+static void board_gpio_init(void)
+{
+	struct gpio_desc desc;
+	int ret;
+
+	/* Enable EXT1_PWREN for PCIE_3.3V */
+	ret = dm_gpio_lookup_name("gpio@22_13", &desc);
+	if (ret)
+		return;
+
+	ret = dm_gpio_request(&desc, "EXT1_PWREN");
+	if (ret)
+		return;
+
+	dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+	dm_gpio_set_value(&desc, 1);
+
+	/* Deassert SD3_nRST */
+	ret = dm_gpio_lookup_name("gpio@22_12", &desc);
+	if (ret)
+		return;
+
+	ret = dm_gpio_request(&desc, "SD3_nRST");
+	if (ret)
+		return;
+
+	dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+	dm_gpio_set_value(&desc, 1);
+
+	if (IS_ENABLED(CONFIG_TARGET_IMX93_14X14_EVK)) {
+		/* Enable I2C_LS_EN levelshift */
+		ret = dm_gpio_lookup_name("gpio@20_16", &desc);
+		if (ret)
+			return;
+
+		ret = dm_gpio_request(&desc, "I2C_LS_EN");
+		if (ret)
+			return;
+
+		dm_gpio_set_dir_flags(&desc, GPIOD_IS_OUT);
+		dm_gpio_set_value(&desc, 1);
+	}
+}
+
+int board_init(void)
+{
+#ifdef CONFIG_USB_TCPC
+	setup_typec();
+#endif
+
+	if (IS_ENABLED(CONFIG_FEC_MXC))
+		setup_fec();
+
+	if (IS_ENABLED(CONFIG_DWC_ETH_QOS))
+		setup_eqos();
+
+	board_gpio_init();
+
+	return 0;
+}
+
+int board_late_init(void)
+{
+#ifdef CONFIG_ENV_IS_IN_MMC
+	board_late_mmc_env_init();
+#endif
+
+	env_set("sec_boot", "no");
+#ifdef CONFIG_AHAB_BOOT
+	env_set("sec_boot", "yes");
+#endif
+
+#ifdef CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
+	env_set("board_name", "11X11_EVK");
+	env_set("board_rev", "iMX93");
+#endif
+	return 0;
+}
+
+#ifdef CONFIG_FSL_FASTBOOT
+#ifdef CONFIG_ANDROID_RECOVERY
+int is_recovery_key_pressing(void)
+{
+	return 0;
+}
+#endif /*CONFIG_ANDROID_RECOVERY*/
+#endif /*CONFIG_FSL_FASTBOOT*/
+
+static int check_mmc_autodetect(void)
+{
+	char *autodetect_str = env_get("mmcautodetect");
+
+	if ((autodetect_str != NULL) &&
+		(strcmp(autodetect_str, "yes") == 0)) {
+		return 1;
+	}
+
+	return 0;
+}
+
+/* This should be defined for each board */
+__weak int mmc_map_to_kernel_blk(int dev_no)
+{
+	return dev_no;
+}
+
+void board_late_mmc_env_init(void)
+{
+	char cmd[32];
+	char mmcblk[32];
+	u32 dev_no = mmc_get_env_dev();
+
+	if (!check_mmc_autodetect())
+		return;
+
+	env_set_ulong("mmcdev", dev_no);
+
+	/* Set mmcblk env */
+	sprintf(mmcblk, "/dev/mmcblk%dp2 rootwait rw",
+		mmc_map_to_kernel_blk(dev_no));
+	env_set("mmcroot", mmcblk);
+
+	sprintf(cmd, "mmc dev %d", dev_no);
+	run_command(cmd, 0);
+}
diff --git a/board/iesy/iesy_imx93_eva_mi/lpddr4_timing.c b/board/iesy/iesy_imx93_eva_mi/lpddr4_timing.c
new file mode 100644
index 00000000000..0de03497368
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/lpddr4_timing.c
@@ -0,0 +1,1545 @@
+/*
+ * Copyright 2024 NXP
+ *
+ * SPDX-License-Identifier: BSD-3-Clause
+ *
+ * Code generated with DDR Tool v3.3.0_7.8-d1cdb7d3.
+ * DDR PHY FW2022.01
+ */
+
+#include <linux/kernel.h>
+#include <asm/arch/ddr.h>
+
+/* Initialize DDRC registers */
+static struct dram_cfg_param ddr_ddrc_cfg[] = {
+    {0x4e300110, 0x44100001},
+    {0x4e300000, 0x8000bf},
+    {0x4e300008, 0x0},
+    {0x4e300080, 0x80000412},
+    {0x4e300084, 0x0},
+    {0x4e300114, 0x1002},
+    {0x4e300260, 0x80},
+    {0x4e300f04, 0x80},
+    {0x4e300800, 0x43b30002},
+    {0x4e300804, 0x1f1f1f1f},
+    {0x4e301000, 0x0},
+    {0x4e301240, 0x0},
+    {0x4e301244, 0x0},
+    {0x4e301248, 0x0},
+    {0x4e30124c, 0x0},
+    {0x4e301250, 0x0},
+    {0x4e301254, 0x0},
+    {0x4e301258, 0x0},
+    {0x4e30125c, 0x0},
+};
+
+/* dram fsp cfg */
+static struct dram_fsp_cfg ddr_dram_fsp_cfg[] = {
+    {
+        {
+            {0x4e300100, 0x24A0321B},
+            {0x4e300104, 0xF8EE001B},
+            {0x4e300108, 0x2F2E3233},
+            {0x4e30010C, 0x0005C18B},
+            {0x4e300124, 0x1C790000},
+            {0x4e300160, 0x00009102},
+            {0x4e30016C, 0x35F00000},
+            {0x4e300170, 0x8B0B0608},
+            {0x4e300250, 0x00000028},
+            {0x4e300254, 0x00FE00FE},
+            {0x4e300258, 0x00000008},
+            {0x4e30025C, 0x00000400},
+            {0x4e300300, 0x224F2213},
+            {0x4e300304, 0x00FE2213},
+            {0x4e300308, 0x0A380E3D},
+        },
+        {
+            {0x01, 0xE4},
+            {0x02, 0x36},
+            {0x03, 0x23},
+            {0x0b, 0x44},
+            {0x0c, 0x48},
+            {0x0e, 0x48},
+            {0x16, 0x04},
+        },
+        0,
+    },
+
+};
+
+/* PHY Initialize Configuration */
+static struct dram_cfg_param ddr_ddrphy_cfg[] = {
+    {0x100a0, 0x4},
+    {0x100a1, 0x5},
+    {0x100a2, 0x6},
+    {0x100a3, 0x7},
+    {0x100a4, 0x1},
+    {0x100a5, 0x0},
+    {0x100a6, 0x3},
+    {0x100a7, 0x2},
+    {0x110a0, 0x2},
+    {0x110a1, 0x3},
+    {0x110a2, 0x0},
+    {0x110a3, 0x1},
+    {0x110a4, 0x7},
+    {0x110a5, 0x6},
+    {0x110a6, 0x4},
+    {0x110a7, 0x5},
+    {0x1005f, 0x1ff},
+    {0x1015f, 0x1ff},
+    {0x1105f, 0x1ff},
+    {0x1115f, 0x1ff},
+    {0x55, 0x1ff},
+    {0x1055, 0x1ff},
+    {0x2055, 0x1ff},
+    {0x200c5, 0x19},
+    {0x2002e, 0x2},
+    {0x90204, 0x0},
+    {0x20024, 0x1e3},
+    {0x2003a, 0x2},
+    {0x2007d, 0x212},
+    {0x2007c, 0x61},
+    {0x20056, 0x3},
+    {0x1004d, 0x600},
+    {0x1014d, 0x600},
+    {0x1104d, 0x600},
+    {0x1114d, 0x600},
+    {0x10049, 0xe3f},
+    {0x10149, 0xe3f},
+    {0x11049, 0xe3f},
+    {0x11149, 0xe3f},
+    {0x43, 0x7f},
+    {0x1043, 0x7f},
+    {0x2043, 0x7f},
+    {0x20018, 0x1},
+    {0x20075, 0x4},
+    {0x20050, 0x11},
+    {0x2009b, 0x2},
+    {0x20008, 0x3a5},
+    {0x20088, 0x9},
+    {0x200b2, 0x10c},
+    {0x10043, 0x5a1},
+    {0x10143, 0x5a1},
+    {0x11043, 0x5a1},
+    {0x11143, 0x5a1},
+    {0x200fa, 0x2},
+    {0x20019, 0x1},
+    {0x200f0, 0x500},
+    {0x200f1, 0x0},
+    {0x200f2, 0x4444},
+    {0x200f3, 0x8888},
+    {0x200f4, 0x5555},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0xf000},
+    {0x1004a, 0x500},
+    {0x1104a, 0x500},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x2002c, 0x0},
+    {0x20021, 0x0},
+    {0x200c7, 0x21},
+    {0x1200c7, 0x21},
+    {0x200ca, 0x24},
+    {0x1200ca, 0x24},
+};
+
+/* PHY trained csr */
+static struct dram_cfg_param ddr_ddrphy_trained_csr[] = {
+    {0x1005f, 0x0},
+    {0x1015f, 0x0},
+    {0x1105f, 0x0},
+    {0x1115f, 0x0},
+    {0x55, 0x0},
+    {0x1055, 0x0},
+    {0x2055, 0x0},
+    {0x200c5, 0x0},
+    {0x2002e, 0x0},
+    {0x90204, 0x0},
+    {0x20024, 0x0},
+    {0x2003a, 0x0},
+    {0x2007d, 0x0},
+    {0x2007c, 0x0},
+    {0x20056, 0x0},
+    {0x1004d, 0x0},
+    {0x1014d, 0x0},
+    {0x1104d, 0x0},
+    {0x1114d, 0x0},
+    {0x10049, 0x0},
+    {0x10149, 0x0},
+    {0x11049, 0x0},
+    {0x11149, 0x0},
+    {0x43, 0x0},
+    {0x1043, 0x0},
+    {0x2043, 0x0},
+    {0x20018, 0x0},
+    {0x20075, 0x0},
+    {0x20050, 0x0},
+    {0x2009b, 0x0},
+    {0x20008, 0x0},
+    {0x20088, 0x0},
+    {0x200b2, 0x0},
+    {0x10043, 0x0},
+    {0x10143, 0x0},
+    {0x11043, 0x0},
+    {0x11143, 0x0},
+    {0x200fa, 0x0},
+    {0x20019, 0x0},
+    {0x200f0, 0x0},
+    {0x200f1, 0x0},
+    {0x200f2, 0x0},
+    {0x200f3, 0x0},
+    {0x200f4, 0x0},
+    {0x200f5, 0x0},
+    {0x200f6, 0x0},
+    {0x200f7, 0x0},
+    {0x1004a, 0x0},
+    {0x1104a, 0x0},
+    {0x20025, 0x0},
+    {0x2002d, 0x0},
+    {0x2002c, 0x0},
+    {0xd0000, 0x0},
+    {0x90000, 0x0},
+    {0x90001, 0x0},
+    {0x90002, 0x0},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x0},
+    {0x90029, 0x0},
+    {0x9002a, 0x0},
+    {0x9002b, 0x0},
+    {0x9002c, 0x0},
+    {0x9002d, 0x0},
+    {0x9002e, 0x0},
+    {0x9002f, 0x0},
+    {0x90030, 0x0},
+    {0x90031, 0x0},
+    {0x90032, 0x0},
+    {0x90033, 0x0},
+    {0x90034, 0x0},
+    {0x90035, 0x0},
+    {0x90036, 0x0},
+    {0x90037, 0x0},
+    {0x90038, 0x0},
+    {0x90039, 0x0},
+    {0x9003a, 0x0},
+    {0x9003b, 0x0},
+    {0x9003c, 0x0},
+    {0x9003d, 0x0},
+    {0x9003e, 0x0},
+    {0x9003f, 0x0},
+    {0x90040, 0x0},
+    {0x90041, 0x0},
+    {0x90042, 0x0},
+    {0x90043, 0x0},
+    {0x90044, 0x0},
+    {0x90045, 0x0},
+    {0x90046, 0x0},
+    {0x90047, 0x0},
+    {0x90048, 0x0},
+    {0x90049, 0x0},
+    {0x9004a, 0x0},
+    {0x9004b, 0x0},
+    {0x9004c, 0x0},
+    {0x9004d, 0x0},
+    {0x9004e, 0x0},
+    {0x9004f, 0x0},
+    {0x90050, 0x0},
+    {0x90051, 0x0},
+    {0x90052, 0x0},
+    {0x90053, 0x0},
+    {0x90054, 0x0},
+    {0x90055, 0x0},
+    {0x90056, 0x0},
+    {0x90057, 0x0},
+    {0x90058, 0x0},
+    {0x90059, 0x0},
+    {0x9005a, 0x0},
+    {0x9005b, 0x0},
+    {0x9005c, 0x0},
+    {0x9005d, 0x0},
+    {0x9005e, 0x0},
+    {0x9005f, 0x0},
+    {0x90060, 0x0},
+    {0x90061, 0x0},
+    {0x90062, 0x0},
+    {0x90063, 0x0},
+    {0x90064, 0x0},
+    {0x90065, 0x0},
+    {0x90066, 0x0},
+    {0x90067, 0x0},
+    {0x90068, 0x0},
+    {0x90069, 0x0},
+    {0x9006a, 0x0},
+    {0x9006b, 0x0},
+    {0x9006c, 0x0},
+    {0x9006d, 0x0},
+    {0x9006e, 0x0},
+    {0x9006f, 0x0},
+    {0x90070, 0x0},
+    {0x90071, 0x0},
+    {0x90072, 0x0},
+    {0x90073, 0x0},
+    {0x90074, 0x0},
+    {0x90075, 0x0},
+    {0x90076, 0x0},
+    {0x90077, 0x0},
+    {0x90078, 0x0},
+    {0x90079, 0x0},
+    {0x9007a, 0x0},
+    {0x9007b, 0x0},
+    {0x9007c, 0x0},
+    {0x9007d, 0x0},
+    {0x9007e, 0x0},
+    {0x9007f, 0x0},
+    {0x90080, 0x0},
+    {0x90081, 0x0},
+    {0x90082, 0x0},
+    {0x90083, 0x0},
+    {0x90084, 0x0},
+    {0x90085, 0x0},
+    {0x90086, 0x0},
+    {0x90087, 0x0},
+    {0x90088, 0x0},
+    {0x90089, 0x0},
+    {0x9008a, 0x0},
+    {0x9008b, 0x0},
+    {0x9008c, 0x0},
+    {0x9008d, 0x0},
+    {0x9008e, 0x0},
+    {0x9008f, 0x0},
+    {0x90090, 0x0},
+    {0x90091, 0x0},
+    {0x90092, 0x0},
+    {0x90093, 0x0},
+    {0x90094, 0x0},
+    {0x90095, 0x0},
+    {0x90096, 0x0},
+    {0x90097, 0x0},
+    {0x90098, 0x0},
+    {0x90099, 0x0},
+    {0x9009a, 0x0},
+    {0x9009b, 0x0},
+    {0x9009c, 0x0},
+    {0x9009d, 0x0},
+    {0x9009e, 0x0},
+    {0x9009f, 0x0},
+    {0x900a0, 0x0},
+    {0x900a1, 0x0},
+    {0x900a2, 0x0},
+    {0x900a3, 0x0},
+    {0x900a4, 0x0},
+    {0x900a5, 0x0},
+    {0x900a6, 0x0},
+    {0x900a7, 0x0},
+    {0x900a8, 0x0},
+    {0x900a9, 0x0},
+    {0x40000, 0x0},
+    {0x40020, 0x0},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x0},
+    {0x40021, 0x0},
+    {0x40041, 0x0},
+    {0x40061, 0x0},
+    {0x40002, 0x0},
+    {0x40022, 0x0},
+    {0x40042, 0x0},
+    {0x40062, 0x0},
+    {0x40003, 0x0},
+    {0x40023, 0x0},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x0},
+    {0x40024, 0x0},
+    {0x40044, 0x0},
+    {0x40064, 0x0},
+    {0x40005, 0x0},
+    {0x40025, 0x0},
+    {0x40045, 0x0},
+    {0x40065, 0x0},
+    {0x40006, 0x0},
+    {0x40026, 0x0},
+    {0x40046, 0x0},
+    {0x40066, 0x0},
+    {0x40007, 0x0},
+    {0x40027, 0x0},
+    {0x40047, 0x0},
+    {0x40067, 0x0},
+    {0x40008, 0x0},
+    {0x40028, 0x0},
+    {0x40048, 0x0},
+    {0x40068, 0x0},
+    {0x40009, 0x0},
+    {0x40029, 0x0},
+    {0x40049, 0x0},
+    {0x40069, 0x0},
+    {0x4000a, 0x0},
+    {0x4002a, 0x0},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x0},
+    {0x4002b, 0x0},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x0},
+    {0x4002c, 0x0},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0x0},
+    {0x4002d, 0x0},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x0},
+    {0x4002e, 0x0},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x0},
+    {0x4002f, 0x0},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x0},
+    {0x40030, 0x0},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x0},
+    {0x40031, 0x0},
+    {0x40051, 0x0},
+    {0x40071, 0x0},
+    {0x40012, 0x0},
+    {0x40032, 0x0},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x0},
+    {0x40033, 0x0},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x0},
+    {0x40034, 0x0},
+    {0x40054, 0x0},
+    {0x40074, 0x0},
+    {0x40015, 0x0},
+    {0x40035, 0x0},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x0},
+    {0x40036, 0x0},
+    {0x40056, 0x0},
+    {0x40076, 0x0},
+    {0x40017, 0x0},
+    {0x40037, 0x0},
+    {0x40057, 0x0},
+    {0x40077, 0x0},
+    {0x40018, 0x0},
+    {0x40038, 0x0},
+    {0x40058, 0x0},
+    {0x40078, 0x0},
+    {0x40019, 0x0},
+    {0x40039, 0x0},
+    {0x40059, 0x0},
+    {0x40079, 0x0},
+    {0x4001a, 0x0},
+    {0x4003a, 0x0},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x0},
+    {0x900ac, 0x0},
+    {0x900ad, 0x0},
+    {0x900ae, 0x0},
+    {0x900af, 0x0},
+    {0x900b0, 0x0},
+    {0x900b1, 0x0},
+    {0x900b2, 0x0},
+    {0x900b3, 0x0},
+    {0x900b4, 0x0},
+    {0x900b5, 0x0},
+    {0x900b6, 0x0},
+    {0x900b7, 0x0},
+    {0x900b8, 0x0},
+    {0x900b9, 0x0},
+    {0x900ba, 0x0},
+    {0x900bb, 0x0},
+    {0x900bc, 0x0},
+    {0x900bd, 0x0},
+    {0x900be, 0x0},
+    {0x900bf, 0x0},
+    {0x900c0, 0x0},
+    {0x900c1, 0x0},
+    {0x900c2, 0x0},
+    {0x900c3, 0x0},
+    {0x900c4, 0x0},
+    {0x900c5, 0x0},
+    {0x900c6, 0x0},
+    {0x900c7, 0x0},
+    {0x900c8, 0x0},
+    {0x900c9, 0x0},
+    {0x900ca, 0x0},
+    {0x900cb, 0x0},
+    {0x900cc, 0x0},
+    {0x900cd, 0x0},
+    {0x900ce, 0x0},
+    {0x900cf, 0x0},
+    {0x900d0, 0x0},
+    {0x900d1, 0x0},
+    {0x900d2, 0x0},
+    {0x900d3, 0x0},
+    {0x900d4, 0x0},
+    {0x900d5, 0x0},
+    {0x900d6, 0x0},
+    {0x900d7, 0x0},
+    {0x900d8, 0x0},
+    {0x900d9, 0x0},
+    {0x900da, 0x0},
+    {0x900db, 0x0},
+    {0x900dc, 0x0},
+    {0x900dd, 0x0},
+    {0x900de, 0x0},
+    {0x900df, 0x0},
+    {0x900e0, 0x0},
+    {0x900e1, 0x0},
+    {0x900e2, 0x0},
+    {0x900e3, 0x0},
+    {0x900e4, 0x0},
+    {0x900e5, 0x0},
+    {0x900e6, 0x0},
+    {0x900e7, 0x0},
+    {0x900e8, 0x0},
+    {0x900e9, 0x0},
+    {0x900ea, 0x0},
+    {0x900eb, 0x0},
+    {0x900ec, 0x0},
+    {0x900ed, 0x0},
+    {0x900ee, 0x0},
+    {0x900ef, 0x0},
+    {0x900f0, 0x0},
+    {0x900f1, 0x0},
+    {0x900f2, 0x0},
+    {0x900f3, 0x0},
+    {0x900f4, 0x0},
+    {0x900f5, 0x0},
+    {0x900f6, 0x0},
+    {0x900f7, 0x0},
+    {0x900f8, 0x0},
+    {0x900f9, 0x0},
+    {0x900fa, 0x0},
+    {0x900fb, 0x0},
+    {0x900fc, 0x0},
+    {0x900fd, 0x0},
+    {0x900fe, 0x0},
+    {0x900ff, 0x0},
+    {0x90100, 0x0},
+    {0x90101, 0x0},
+    {0x90102, 0x0},
+    {0x90103, 0x0},
+    {0x90104, 0x0},
+    {0x90105, 0x0},
+    {0x90106, 0x0},
+    {0x90107, 0x0},
+    {0x90108, 0x0},
+    {0x90109, 0x0},
+    {0x9010a, 0x0},
+    {0x9010b, 0x0},
+    {0x9010c, 0x0},
+    {0x9010d, 0x0},
+    {0x9010e, 0x0},
+    {0x9010f, 0x0},
+    {0x90110, 0x0},
+    {0x90111, 0x0},
+    {0x90112, 0x0},
+    {0x90113, 0x0},
+    {0x90114, 0x0},
+    {0x90115, 0x0},
+    {0x90116, 0x0},
+    {0x90117, 0x0},
+    {0x90118, 0x0},
+    {0x90119, 0x0},
+    {0x9011a, 0x0},
+    {0x9011b, 0x0},
+    {0x9011c, 0x0},
+    {0x9011d, 0x0},
+    {0x9011e, 0x0},
+    {0x9011f, 0x0},
+    {0x90120, 0x0},
+    {0x90121, 0x0},
+    {0x90122, 0x0},
+    {0x90123, 0x0},
+    {0x90124, 0x0},
+    {0x90125, 0x0},
+    {0x90126, 0x0},
+    {0x90127, 0x0},
+    {0x90128, 0x0},
+    {0x90129, 0x0},
+    {0x9012a, 0x0},
+    {0x9012b, 0x0},
+    {0x9012c, 0x0},
+    {0x9012d, 0x0},
+    {0x9012e, 0x0},
+    {0x9012f, 0x0},
+    {0x90130, 0x0},
+    {0x90131, 0x0},
+    {0x90132, 0x0},
+    {0x90133, 0x0},
+    {0x90134, 0x0},
+    {0x90135, 0x0},
+    {0x90136, 0x0},
+    {0x90137, 0x0},
+    {0x90138, 0x0},
+    {0x90139, 0x0},
+    {0x9013a, 0x0},
+    {0x9013b, 0x0},
+    {0x9013c, 0x0},
+    {0x9013d, 0x0},
+    {0x9013e, 0x0},
+    {0x9013f, 0x0},
+    {0x90140, 0x0},
+    {0x90141, 0x0},
+    {0x90142, 0x0},
+    {0x90143, 0x0},
+    {0x90144, 0x0},
+    {0x90145, 0x0},
+    {0x90146, 0x0},
+    {0x90147, 0x0},
+    {0x90148, 0x0},
+    {0x90149, 0x0},
+    {0x9014a, 0x0},
+    {0x9014b, 0x0},
+    {0x9014c, 0x0},
+    {0x9014d, 0x0},
+    {0x9014e, 0x0},
+    {0x9014f, 0x0},
+    {0x90150, 0x0},
+    {0x90151, 0x0},
+    {0x90152, 0x0},
+    {0x90153, 0x0},
+    {0x90154, 0x0},
+    {0x90155, 0x0},
+    {0x90156, 0x0},
+    {0x90157, 0x0},
+    {0x90158, 0x0},
+    {0x90159, 0x0},
+    {0x9015a, 0x0},
+    {0x9015b, 0x0},
+    {0x9015c, 0x0},
+    {0x9015d, 0x0},
+    {0x9015e, 0x0},
+    {0x9015f, 0x0},
+    {0x90160, 0x0},
+    {0x90161, 0x0},
+    {0x90162, 0x0},
+    {0x90163, 0x0},
+    {0x90164, 0x0},
+    {0x90165, 0x0},
+    {0x90166, 0x0},
+    {0x90167, 0x0},
+    {0x90168, 0x0},
+    {0x90169, 0x0},
+    {0x9016a, 0x0},
+    {0x9016b, 0x0},
+    {0x9016c, 0x0},
+    {0x9016d, 0x0},
+    {0x9016e, 0x0},
+    {0x9016f, 0x0},
+    {0x90170, 0x0},
+    {0x90171, 0x0},
+    {0x90172, 0x0},
+    {0x90173, 0x0},
+    {0x90174, 0x0},
+    {0x90175, 0x0},
+    {0x90176, 0x0},
+    {0x90177, 0x0},
+    {0x90178, 0x0},
+    {0x90179, 0x0},
+    {0x9017a, 0x0},
+    {0x9017b, 0x0},
+    {0x9017c, 0x0},
+    {0x9017d, 0x0},
+    {0x9017e, 0x0},
+    {0x9017f, 0x0},
+    {0x90180, 0x0},
+    {0x90181, 0x0},
+    {0x90182, 0x0},
+    {0x90183, 0x0},
+    {0x90184, 0x0},
+    {0x90006, 0x0},
+    {0x90007, 0x0},
+    {0x90008, 0x0},
+    {0x90009, 0x0},
+    {0x9000a, 0x0},
+    {0x9000b, 0x0},
+    {0xd00e7, 0x0},
+    {0x90017, 0x0},
+    {0x9001f, 0x0},
+    {0x90026, 0x0},
+    {0x400d0, 0x0},
+    {0x400d1, 0x0},
+    {0x400d2, 0x0},
+    {0x400d3, 0x0},
+    {0x400d4, 0x0},
+    {0x400d5, 0x0},
+    {0x400d6, 0x0},
+    {0x400d7, 0x0},
+    {0x200be, 0x0},
+    {0x2000b, 0x0},
+    {0x2000c, 0x0},
+    {0x2000d, 0x0},
+    {0x2000e, 0x0},
+    {0x9000c, 0x0},
+    {0x9000d, 0x0},
+    {0x9000e, 0x0},
+    {0x9000f, 0x0},
+    {0x90010, 0x0},
+    {0x90011, 0x0},
+    {0x90012, 0x0},
+    {0x90013, 0x0},
+    {0x20010, 0x0},
+    {0x20011, 0x0},
+    {0x40080, 0x0},
+    {0x40081, 0x0},
+    {0x40082, 0x0},
+    {0x40083, 0x0},
+    {0x40084, 0x0},
+    {0x40085, 0x0},
+    {0x400fd, 0x0},
+    {0x400f1, 0x0},
+    {0x10011, 0x0},
+    {0x10012, 0x0},
+    {0x10013, 0x0},
+    {0x10018, 0x0},
+    {0x10002, 0x0},
+    {0x100b2, 0x0},
+    {0x101b4, 0x0},
+    {0x102b4, 0x0},
+    {0x103b4, 0x0},
+    {0x104b4, 0x0},
+    {0x105b4, 0x0},
+    {0x106b4, 0x0},
+    {0x107b4, 0x0},
+    {0x108b4, 0x0},
+    {0x11011, 0x0},
+    {0x11012, 0x0},
+    {0x11013, 0x0},
+    {0x11018, 0x0},
+    {0x11002, 0x0},
+    {0x110b2, 0x0},
+    {0x111b4, 0x0},
+    {0x112b4, 0x0},
+    {0x113b4, 0x0},
+    {0x114b4, 0x0},
+    {0x115b4, 0x0},
+    {0x116b4, 0x0},
+    {0x117b4, 0x0},
+    {0x118b4, 0x0},
+    {0x20089, 0x0},
+    {0xc0080, 0x0},
+    {0x200cb, 0x0},
+    {0x10068, 0x0},
+    {0x10069, 0x0},
+    {0x10168, 0x0},
+    {0x10169, 0x0},
+    {0x10268, 0x0},
+    {0x10269, 0x0},
+    {0x10368, 0x0},
+    {0x10369, 0x0},
+    {0x10468, 0x0},
+    {0x10469, 0x0},
+    {0x10568, 0x0},
+    {0x10569, 0x0},
+    {0x10668, 0x0},
+    {0x10669, 0x0},
+    {0x10768, 0x0},
+    {0x10769, 0x0},
+    {0x10868, 0x0},
+    {0x10869, 0x0},
+    {0x100aa, 0x0},
+    {0x10062, 0x0},
+    {0x10001, 0x0},
+    {0x100a0, 0x0},
+    {0x100a1, 0x0},
+    {0x100a2, 0x0},
+    {0x100a3, 0x0},
+    {0x100a4, 0x0},
+    {0x100a5, 0x0},
+    {0x100a6, 0x0},
+    {0x100a7, 0x0},
+    {0x11068, 0x0},
+    {0x11069, 0x0},
+    {0x11168, 0x0},
+    {0x11169, 0x0},
+    {0x11268, 0x0},
+    {0x11269, 0x0},
+    {0x11368, 0x0},
+    {0x11369, 0x0},
+    {0x11468, 0x0},
+    {0x11469, 0x0},
+    {0x11568, 0x0},
+    {0x11569, 0x0},
+    {0x11668, 0x0},
+    {0x11669, 0x0},
+    {0x11768, 0x0},
+    {0x11769, 0x0},
+    {0x11868, 0x0},
+    {0x11869, 0x0},
+    {0x110aa, 0x0},
+    {0x11062, 0x0},
+    {0x11001, 0x0},
+    {0x110a0, 0x0},
+    {0x110a1, 0x0},
+    {0x110a2, 0x0},
+    {0x110a3, 0x0},
+    {0x110a4, 0x0},
+    {0x110a5, 0x0},
+    {0x110a6, 0x0},
+    {0x110a7, 0x0},
+    {0x80, 0x0},
+    {0x1080, 0x0},
+    {0x2080, 0x0},
+    {0x10020, 0x0},
+    {0x10080, 0x0},
+    {0x10081, 0x0},
+    {0x100d0, 0x0},
+    {0x100d1, 0x0},
+    {0x1008c, 0x0},
+    {0x1008d, 0x0},
+    {0x10180, 0x0},
+    {0x10181, 0x0},
+    {0x101d0, 0x0},
+    {0x101d1, 0x0},
+    {0x1018c, 0x0},
+    {0x1018d, 0x0},
+    {0x100c0, 0x0},
+    {0x100c1, 0x0},
+    {0x101c0, 0x0},
+    {0x101c1, 0x0},
+    {0x102c0, 0x0},
+    {0x102c1, 0x0},
+    {0x103c0, 0x0},
+    {0x103c1, 0x0},
+    {0x104c0, 0x0},
+    {0x104c1, 0x0},
+    {0x105c0, 0x0},
+    {0x105c1, 0x0},
+    {0x106c0, 0x0},
+    {0x106c1, 0x0},
+    {0x107c0, 0x0},
+    {0x107c1, 0x0},
+    {0x108c0, 0x0},
+    {0x108c1, 0x0},
+    {0x100ae, 0x0},
+    {0x100af, 0x0},
+    {0x11020, 0x0},
+    {0x11080, 0x0},
+    {0x11081, 0x0},
+    {0x110d0, 0x0},
+    {0x110d1, 0x0},
+    {0x1108c, 0x0},
+    {0x1108d, 0x0},
+    {0x11180, 0x0},
+    {0x11181, 0x0},
+    {0x111d0, 0x0},
+    {0x111d1, 0x0},
+    {0x1118c, 0x0},
+    {0x1118d, 0x0},
+    {0x110c0, 0x0},
+    {0x110c1, 0x0},
+    {0x111c0, 0x0},
+    {0x111c1, 0x0},
+    {0x112c0, 0x0},
+    {0x112c1, 0x0},
+    {0x113c0, 0x0},
+    {0x113c1, 0x0},
+    {0x114c0, 0x0},
+    {0x114c1, 0x0},
+    {0x115c0, 0x0},
+    {0x115c1, 0x0},
+    {0x116c0, 0x0},
+    {0x116c1, 0x0},
+    {0x117c0, 0x0},
+    {0x117c1, 0x0},
+    {0x118c0, 0x0},
+    {0x118c1, 0x0},
+    {0x110ae, 0x0},
+    {0x110af, 0x0},
+    {0x90201, 0x0},
+    {0x90202, 0x0},
+    {0x90203, 0x0},
+    {0x90205, 0x0},
+    {0x90206, 0x0},
+    {0x90207, 0x0},
+    {0x90208, 0x0},
+    {0x20020, 0x0},
+    {0x20077, 0x0},
+    {0x20072, 0x0},
+    {0x20073, 0x0},
+    {0x400c0, 0x0},
+    {0x10040, 0x0},
+    {0x10140, 0x0},
+    {0x10240, 0x0},
+    {0x10340, 0x0},
+    {0x10440, 0x0},
+    {0x10540, 0x0},
+    {0x10640, 0x0},
+    {0x10740, 0x0},
+    {0x10840, 0x0},
+    {0x11040, 0x0},
+    {0x11140, 0x0},
+    {0x11240, 0x0},
+    {0x11340, 0x0},
+    {0x11440, 0x0},
+    {0x11540, 0x0},
+    {0x11640, 0x0},
+    {0x11740, 0x0},
+    {0x11840, 0x0},
+};
+
+/* P0 message block parameter for training firmware */
+static struct dram_cfg_param ddr_fsp0_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x131f},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x23},
+    {0x5401b, 0x4844},
+    {0x5401c, 0x4808},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x23},
+    {0x54021, 0x4844},
+    {0x54022, 0x4808},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x2336},
+    {0x54034, 0x4400},
+    {0x54035, 0x848},
+    {0x54036, 0x48},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x2336},
+    {0x5403a, 0x4400},
+    {0x5403b, 0x848},
+    {0x5403c, 0x48},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+
+/* P0 2D message block parameter for training firmware */
+static struct dram_cfg_param ddr_fsp0_2d_cfg[] = {
+    {0xd0000, 0x0},
+    {0x54003, 0xe94},
+    {0x54004, 0x4},
+    {0x54006, 0x15},
+    {0x54008, 0x61},
+    {0x54009, 0xc8},
+    {0x5400b, 0x4},
+    {0x5400d, 0x100},
+    {0x5400f, 0x100},
+    {0x54010, 0x2080},
+    {0x54012, 0x110},
+    {0x54019, 0x36e4},
+    {0x5401a, 0x23},
+    {0x5401b, 0x4844},
+    {0x5401c, 0x4808},
+    {0x5401e, 0x4},
+    {0x5401f, 0x36e4},
+    {0x54020, 0x23},
+    {0x54021, 0x4844},
+    {0x54022, 0x4808},
+    {0x54024, 0x4},
+    {0x54032, 0xe400},
+    {0x54033, 0x2336},
+    {0x54034, 0x4400},
+    {0x54035, 0x848},
+    {0x54036, 0x48},
+    {0x54037, 0x400},
+    {0x54038, 0xe400},
+    {0x54039, 0x2336},
+    {0x5403a, 0x4400},
+    {0x5403b, 0x848},
+    {0x5403c, 0x48},
+    {0x5403d, 0x400},
+    {0xd0000, 0x1}
+};
+
+/* DRAM PHY init engine image */
+static struct dram_cfg_param ddr_phy_pie[] = {
+    {0xd0000, 0x0},
+    {0x90000, 0x10},
+    {0x90001, 0x400},
+    {0x90002, 0x10e},
+    {0x90003, 0x0},
+    {0x90004, 0x0},
+    {0x90005, 0x8},
+    {0x90029, 0xb},
+    {0x9002a, 0x480},
+    {0x9002b, 0x109},
+    {0x9002c, 0x8},
+    {0x9002d, 0x448},
+    {0x9002e, 0x139},
+    {0x9002f, 0x8},
+    {0x90030, 0x478},
+    {0x90031, 0x109},
+    {0x90032, 0x0},
+    {0x90033, 0xe8},
+    {0x90034, 0x109},
+    {0x90035, 0x2},
+    {0x90036, 0x10},
+    {0x90037, 0x139},
+    {0x90038, 0xb},
+    {0x90039, 0x7c0},
+    {0x9003a, 0x139},
+    {0x9003b, 0x44},
+    {0x9003c, 0x633},
+    {0x9003d, 0x159},
+    {0x9003e, 0x14f},
+    {0x9003f, 0x630},
+    {0x90040, 0x159},
+    {0x90041, 0x47},
+    {0x90042, 0x633},
+    {0x90043, 0x149},
+    {0x90044, 0x4f},
+    {0x90045, 0x633},
+    {0x90046, 0x179},
+    {0x90047, 0x8},
+    {0x90048, 0xe0},
+    {0x90049, 0x109},
+    {0x9004a, 0x0},
+    {0x9004b, 0x7c8},
+    {0x9004c, 0x109},
+    {0x9004d, 0x0},
+    {0x9004e, 0x1},
+    {0x9004f, 0x8},
+    {0x90050, 0x30},
+    {0x90051, 0x65a},
+    {0x90052, 0x9},
+    {0x90053, 0x0},
+    {0x90054, 0x45a},
+    {0x90055, 0x9},
+    {0x90056, 0x0},
+    {0x90057, 0x448},
+    {0x90058, 0x109},
+    {0x90059, 0x40},
+    {0x9005a, 0x633},
+    {0x9005b, 0x179},
+    {0x9005c, 0x1},
+    {0x9005d, 0x618},
+    {0x9005e, 0x109},
+    {0x9005f, 0x40c0},
+    {0x90060, 0x633},
+    {0x90061, 0x149},
+    {0x90062, 0x8},
+    {0x90063, 0x4},
+    {0x90064, 0x48},
+    {0x90065, 0x4040},
+    {0x90066, 0x633},
+    {0x90067, 0x149},
+    {0x90068, 0x0},
+    {0x90069, 0x4},
+    {0x9006a, 0x48},
+    {0x9006b, 0x40},
+    {0x9006c, 0x633},
+    {0x9006d, 0x149},
+    {0x9006e, 0x0},
+    {0x9006f, 0x658},
+    {0x90070, 0x109},
+    {0x90071, 0x10},
+    {0x90072, 0x4},
+    {0x90073, 0x18},
+    {0x90074, 0x0},
+    {0x90075, 0x4},
+    {0x90076, 0x78},
+    {0x90077, 0x549},
+    {0x90078, 0x633},
+    {0x90079, 0x159},
+    {0x9007a, 0xd49},
+    {0x9007b, 0x633},
+    {0x9007c, 0x159},
+    {0x9007d, 0x94a},
+    {0x9007e, 0x633},
+    {0x9007f, 0x159},
+    {0x90080, 0x441},
+    {0x90081, 0x633},
+    {0x90082, 0x149},
+    {0x90083, 0x42},
+    {0x90084, 0x633},
+    {0x90085, 0x149},
+    {0x90086, 0x1},
+    {0x90087, 0x633},
+    {0x90088, 0x149},
+    {0x90089, 0x0},
+    {0x9008a, 0xe0},
+    {0x9008b, 0x109},
+    {0x9008c, 0xa},
+    {0x9008d, 0x10},
+    {0x9008e, 0x109},
+    {0x9008f, 0x9},
+    {0x90090, 0x3c0},
+    {0x90091, 0x149},
+    {0x90092, 0x9},
+    {0x90093, 0x3c0},
+    {0x90094, 0x159},
+    {0x90095, 0x18},
+    {0x90096, 0x10},
+    {0x90097, 0x109},
+    {0x90098, 0x0},
+    {0x90099, 0x3c0},
+    {0x9009a, 0x109},
+    {0x9009b, 0x18},
+    {0x9009c, 0x4},
+    {0x9009d, 0x48},
+    {0x9009e, 0x18},
+    {0x9009f, 0x4},
+    {0x900a0, 0x58},
+    {0x900a1, 0xb},
+    {0x900a2, 0x10},
+    {0x900a3, 0x109},
+    {0x900a4, 0x1},
+    {0x900a5, 0x10},
+    {0x900a6, 0x109},
+    {0x900a7, 0x5},
+    {0x900a8, 0x7c0},
+    {0x900a9, 0x109},
+    {0x40000, 0x811},
+    {0x40020, 0x880},
+    {0x40040, 0x0},
+    {0x40060, 0x0},
+    {0x40001, 0x4008},
+    {0x40021, 0x83},
+    {0x40041, 0x4f},
+    {0x40061, 0x0},
+    {0x40002, 0x4040},
+    {0x40022, 0x83},
+    {0x40042, 0x51},
+    {0x40062, 0x0},
+    {0x40003, 0x811},
+    {0x40023, 0x880},
+    {0x40043, 0x0},
+    {0x40063, 0x0},
+    {0x40004, 0x720},
+    {0x40024, 0xf},
+    {0x40044, 0x1740},
+    {0x40064, 0x0},
+    {0x40005, 0x16},
+    {0x40025, 0x83},
+    {0x40045, 0x4b},
+    {0x40065, 0x0},
+    {0x40006, 0x716},
+    {0x40026, 0xf},
+    {0x40046, 0x2001},
+    {0x40066, 0x0},
+    {0x40007, 0x716},
+    {0x40027, 0xf},
+    {0x40047, 0x2800},
+    {0x40067, 0x0},
+    {0x40008, 0x716},
+    {0x40028, 0xf},
+    {0x40048, 0xf00},
+    {0x40068, 0x0},
+    {0x40009, 0x720},
+    {0x40029, 0xf},
+    {0x40049, 0x1400},
+    {0x40069, 0x0},
+    {0x4000a, 0xe08},
+    {0x4002a, 0xc15},
+    {0x4004a, 0x0},
+    {0x4006a, 0x0},
+    {0x4000b, 0x625},
+    {0x4002b, 0x15},
+    {0x4004b, 0x0},
+    {0x4006b, 0x0},
+    {0x4000c, 0x4028},
+    {0x4002c, 0x80},
+    {0x4004c, 0x0},
+    {0x4006c, 0x0},
+    {0x4000d, 0xe08},
+    {0x4002d, 0xc1a},
+    {0x4004d, 0x0},
+    {0x4006d, 0x0},
+    {0x4000e, 0x625},
+    {0x4002e, 0x1a},
+    {0x4004e, 0x0},
+    {0x4006e, 0x0},
+    {0x4000f, 0x4040},
+    {0x4002f, 0x80},
+    {0x4004f, 0x0},
+    {0x4006f, 0x0},
+    {0x40010, 0x2604},
+    {0x40030, 0x15},
+    {0x40050, 0x0},
+    {0x40070, 0x0},
+    {0x40011, 0x708},
+    {0x40031, 0x5},
+    {0x40051, 0x0},
+    {0x40071, 0x2002},
+    {0x40012, 0x8},
+    {0x40032, 0x80},
+    {0x40052, 0x0},
+    {0x40072, 0x0},
+    {0x40013, 0x2604},
+    {0x40033, 0x1a},
+    {0x40053, 0x0},
+    {0x40073, 0x0},
+    {0x40014, 0x708},
+    {0x40034, 0xa},
+    {0x40054, 0x0},
+    {0x40074, 0x2002},
+    {0x40015, 0x4040},
+    {0x40035, 0x80},
+    {0x40055, 0x0},
+    {0x40075, 0x0},
+    {0x40016, 0x60a},
+    {0x40036, 0x15},
+    {0x40056, 0x1200},
+    {0x40076, 0x0},
+    {0x40017, 0x61a},
+    {0x40037, 0x15},
+    {0x40057, 0x1300},
+    {0x40077, 0x0},
+    {0x40018, 0x60a},
+    {0x40038, 0x1a},
+    {0x40058, 0x1200},
+    {0x40078, 0x0},
+    {0x40019, 0x642},
+    {0x40039, 0x1a},
+    {0x40059, 0x1300},
+    {0x40079, 0x0},
+    {0x4001a, 0x4808},
+    {0x4003a, 0x880},
+    {0x4005a, 0x0},
+    {0x4007a, 0x0},
+    {0x900aa, 0x0},
+    {0x900ab, 0x790},
+    {0x900ac, 0x11a},
+    {0x900ad, 0x8},
+    {0x900ae, 0x7aa},
+    {0x900af, 0x2a},
+    {0x900b0, 0x10},
+    {0x900b1, 0x7b2},
+    {0x900b2, 0x2a},
+    {0x900b3, 0x0},
+    {0x900b4, 0x7c8},
+    {0x900b5, 0x109},
+    {0x900b6, 0x10},
+    {0x900b7, 0x10},
+    {0x900b8, 0x109},
+    {0x900b9, 0x10},
+    {0x900ba, 0x2a8},
+    {0x900bb, 0x129},
+    {0x900bc, 0x8},
+    {0x900bd, 0x370},
+    {0x900be, 0x129},
+    {0x900bf, 0xa},
+    {0x900c0, 0x3c8},
+    {0x900c1, 0x1a9},
+    {0x900c2, 0xc},
+    {0x900c3, 0x408},
+    {0x900c4, 0x199},
+    {0x900c5, 0x14},
+    {0x900c6, 0x790},
+    {0x900c7, 0x11a},
+    {0x900c8, 0x8},
+    {0x900c9, 0x4},
+    {0x900ca, 0x18},
+    {0x900cb, 0xe},
+    {0x900cc, 0x408},
+    {0x900cd, 0x199},
+    {0x900ce, 0x8},
+    {0x900cf, 0x8568},
+    {0x900d0, 0x108},
+    {0x900d1, 0x18},
+    {0x900d2, 0x790},
+    {0x900d3, 0x16a},
+    {0x900d4, 0x8},
+    {0x900d5, 0x1d8},
+    {0x900d6, 0x169},
+    {0x900d7, 0x10},
+    {0x900d8, 0x8558},
+    {0x900d9, 0x168},
+    {0x900da, 0x1ff8},
+    {0x900db, 0x85a8},
+    {0x900dc, 0x1e8},
+    {0x900dd, 0x50},
+    {0x900de, 0x798},
+    {0x900df, 0x16a},
+    {0x900e0, 0x60},
+    {0x900e1, 0x7a0},
+    {0x900e2, 0x16a},
+    {0x900e3, 0x8},
+    {0x900e4, 0x8310},
+    {0x900e5, 0x168},
+    {0x900e6, 0x8},
+    {0x900e7, 0xa310},
+    {0x900e8, 0x168},
+    {0x900e9, 0xa},
+    {0x900ea, 0x408},
+    {0x900eb, 0x169},
+    {0x900ec, 0x6e},
+    {0x900ed, 0x0},
+    {0x900ee, 0x68},
+    {0x900ef, 0x0},
+    {0x900f0, 0x408},
+    {0x900f1, 0x169},
+    {0x900f2, 0x0},
+    {0x900f3, 0x8310},
+    {0x900f4, 0x168},
+    {0x900f5, 0x0},
+    {0x900f6, 0xa310},
+    {0x900f7, 0x168},
+    {0x900f8, 0x1ff8},
+    {0x900f9, 0x85a8},
+    {0x900fa, 0x1e8},
+    {0x900fb, 0x68},
+    {0x900fc, 0x798},
+    {0x900fd, 0x16a},
+    {0x900fe, 0x78},
+    {0x900ff, 0x7a0},
+    {0x90100, 0x16a},
+    {0x90101, 0x68},
+    {0x90102, 0x790},
+    {0x90103, 0x16a},
+    {0x90104, 0x8},
+    {0x90105, 0x8b10},
+    {0x90106, 0x168},
+    {0x90107, 0x8},
+    {0x90108, 0xab10},
+    {0x90109, 0x168},
+    {0x9010a, 0xa},
+    {0x9010b, 0x408},
+    {0x9010c, 0x169},
+    {0x9010d, 0x58},
+    {0x9010e, 0x0},
+    {0x9010f, 0x68},
+    {0x90110, 0x0},
+    {0x90111, 0x408},
+    {0x90112, 0x169},
+    {0x90113, 0x0},
+    {0x90114, 0x8b10},
+    {0x90115, 0x168},
+    {0x90116, 0x1},
+    {0x90117, 0xab10},
+    {0x90118, 0x168},
+    {0x90119, 0x0},
+    {0x9011a, 0x1d8},
+    {0x9011b, 0x169},
+    {0x9011c, 0x80},
+    {0x9011d, 0x790},
+    {0x9011e, 0x16a},
+    {0x9011f, 0x18},
+    {0x90120, 0x7aa},
+    {0x90121, 0x6a},
+    {0x90122, 0xa},
+    {0x90123, 0x0},
+    {0x90124, 0x1e9},
+    {0x90125, 0x8},
+    {0x90126, 0x8080},
+    {0x90127, 0x108},
+    {0x90128, 0xf},
+    {0x90129, 0x408},
+    {0x9012a, 0x169},
+    {0x9012b, 0xc},
+    {0x9012c, 0x0},
+    {0x9012d, 0x68},
+    {0x9012e, 0x9},
+    {0x9012f, 0x0},
+    {0x90130, 0x1a9},
+    {0x90131, 0x0},
+    {0x90132, 0x408},
+    {0x90133, 0x169},
+    {0x90134, 0x0},
+    {0x90135, 0x8080},
+    {0x90136, 0x108},
+    {0x90137, 0x8},
+    {0x90138, 0x7aa},
+    {0x90139, 0x6a},
+    {0x9013a, 0x0},
+    {0x9013b, 0x8568},
+    {0x9013c, 0x108},
+    {0x9013d, 0xb7},
+    {0x9013e, 0x790},
+    {0x9013f, 0x16a},
+    {0x90140, 0x1f},
+    {0x90141, 0x0},
+    {0x90142, 0x68},
+    {0x90143, 0x8},
+    {0x90144, 0x8558},
+    {0x90145, 0x168},
+    {0x90146, 0xf},
+    {0x90147, 0x408},
+    {0x90148, 0x169},
+    {0x90149, 0xd},
+    {0x9014a, 0x0},
+    {0x9014b, 0x68},
+    {0x9014c, 0x0},
+    {0x9014d, 0x408},
+    {0x9014e, 0x169},
+    {0x9014f, 0x0},
+    {0x90150, 0x8558},
+    {0x90151, 0x168},
+    {0x90152, 0x8},
+    {0x90153, 0x3c8},
+    {0x90154, 0x1a9},
+    {0x90155, 0x3},
+    {0x90156, 0x370},
+    {0x90157, 0x129},
+    {0x90158, 0x20},
+    {0x90159, 0x2aa},
+    {0x9015a, 0x9},
+    {0x9015b, 0x8},
+    {0x9015c, 0xe8},
+    {0x9015d, 0x109},
+    {0x9015e, 0x0},
+    {0x9015f, 0x8140},
+    {0x90160, 0x10c},
+    {0x90161, 0x10},
+    {0x90162, 0x8138},
+    {0x90163, 0x104},
+    {0x90164, 0x8},
+    {0x90165, 0x448},
+    {0x90166, 0x109},
+    {0x90167, 0xf},
+    {0x90168, 0x7c0},
+    {0x90169, 0x109},
+    {0x9016a, 0x0},
+    {0x9016b, 0xe8},
+    {0x9016c, 0x109},
+    {0x9016d, 0x47},
+    {0x9016e, 0x630},
+    {0x9016f, 0x109},
+    {0x90170, 0x8},
+    {0x90171, 0x618},
+    {0x90172, 0x109},
+    {0x90173, 0x8},
+    {0x90174, 0xe0},
+    {0x90175, 0x109},
+    {0x90176, 0x0},
+    {0x90177, 0x7c8},
+    {0x90178, 0x109},
+    {0x90179, 0x8},
+    {0x9017a, 0x8140},
+    {0x9017b, 0x10c},
+    {0x9017c, 0x0},
+    {0x9017d, 0x478},
+    {0x9017e, 0x109},
+    {0x9017f, 0x0},
+    {0x90180, 0x1},
+    {0x90181, 0x8},
+    {0x90182, 0x8},
+    {0x90183, 0x4},
+    {0x90184, 0x0},
+    {0x90006, 0x8},
+    {0x90007, 0x7c8},
+    {0x90008, 0x109},
+    {0x90009, 0x0},
+    {0x9000a, 0x400},
+    {0x9000b, 0x106},
+    {0xd00e7, 0x400},
+    {0x90017, 0x0},
+    {0x9001f, 0x2b},
+    {0x90026, 0x69},
+    {0x400d0, 0x0},
+    {0x400d1, 0x101},
+    {0x400d2, 0x105},
+    {0x400d3, 0x107},
+    {0x400d4, 0x10f},
+    {0x400d5, 0x202},
+    {0x400d6, 0x20a},
+    {0x400d7, 0x20b},
+    {0x2003a, 0x2},
+    {0x200be, 0x3},
+    {0x2000b, 0x75},
+    {0x2000c, 0xe9},
+    {0x2000d, 0x91c},
+    {0x2000e, 0x2c},
+    {0x9000c, 0x0},
+    {0x9000d, 0x173},
+    {0x9000e, 0x60},
+    {0x9000f, 0x6110},
+    {0x90010, 0x2152},
+    {0x90011, 0xdfbd},
+    {0x90012, 0x2060},
+    {0x90013, 0x6152},
+    {0x20010, 0x5a},
+    {0x20011, 0x3},
+    {0x40080, 0xe0},
+    {0x40081, 0x12},
+    {0x40082, 0xe0},
+    {0x40083, 0x12},
+    {0x40084, 0xe0},
+    {0x40085, 0x12},
+    {0x400fd, 0xf},
+    {0x400f1, 0xe},
+    {0x10011, 0x1},
+    {0x10012, 0x1},
+    {0x10013, 0x180},
+    {0x10018, 0x1},
+    {0x10002, 0x6209},
+    {0x100b2, 0x1},
+    {0x101b4, 0x1},
+    {0x102b4, 0x1},
+    {0x103b4, 0x1},
+    {0x104b4, 0x1},
+    {0x105b4, 0x1},
+    {0x106b4, 0x1},
+    {0x107b4, 0x1},
+    {0x108b4, 0x1},
+    {0x11011, 0x1},
+    {0x11012, 0x1},
+    {0x11013, 0x180},
+    {0x11018, 0x1},
+    {0x11002, 0x6209},
+    {0x110b2, 0x1},
+    {0x111b4, 0x1},
+    {0x112b4, 0x1},
+    {0x113b4, 0x1},
+    {0x114b4, 0x1},
+    {0x115b4, 0x1},
+    {0x116b4, 0x1},
+    {0x117b4, 0x1},
+    {0x118b4, 0x1},
+    {0x20089, 0x1},
+    {0x20088, 0x19},
+    {0xc0080, 0x0},
+    {0xd0000, 0x1},
+};
+
+static struct dram_fsp_msg ddr_dram_fsp_msg[] = {
+    {
+        /* P0 3733mts 1D */
+        .drate = 3733,
+        .fw_type = FW_1D_IMAGE,
+        .fsp_cfg = ddr_fsp0_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_cfg),
+    },
+    {
+        /* P0 3733mts 2D */
+        .drate = 3733,
+        .fw_type = FW_2D_IMAGE,
+        .fsp_cfg = ddr_fsp0_2d_cfg,
+        .fsp_cfg_num = ARRAY_SIZE(ddr_fsp0_2d_cfg),
+    },
+};
+
+/* ddr timing config params */
+struct dram_timing_info dram_timing = {
+    .ddrc_cfg = ddr_ddrc_cfg,
+    .ddrc_cfg_num = ARRAY_SIZE(ddr_ddrc_cfg),
+    .ddrphy_cfg = ddr_ddrphy_cfg,
+    .ddrphy_cfg_num = ARRAY_SIZE(ddr_ddrphy_cfg),
+    .fsp_msg = ddr_dram_fsp_msg,
+    .fsp_msg_num = ARRAY_SIZE(ddr_dram_fsp_msg),
+    .ddrphy_trained_csr = ddr_ddrphy_trained_csr,
+    .ddrphy_trained_csr_num = ARRAY_SIZE(ddr_ddrphy_trained_csr),
+    .ddrphy_pie = ddr_phy_pie,
+    .ddrphy_pie_num = ARRAY_SIZE(ddr_phy_pie),
+    .fsp_table = { 3733, },
+    .fsp_cfg = ddr_dram_fsp_cfg,
+    .fsp_cfg_num = ARRAY_SIZE(ddr_dram_fsp_cfg),
+};
+
diff --git a/board/iesy/iesy_imx93_eva_mi/spl.c b/board/iesy/iesy_imx93_eva_mi/spl.c
new file mode 100644
index 00000000000..368a9b3ba63
--- /dev/null
+++ b/board/iesy/iesy_imx93_eva_mi/spl.c
@@ -0,0 +1,188 @@
+// SPDX-License-Identifier: GPL-2.0+
+/*
+ * Copyright 2022 NXP
+ */
+
+#include <common.h>
+#include <command.h>
+#include <cpu_func.h>
+#include <hang.h>
+#include <image.h>
+#include <init.h>
+#include <log.h>
+#include <spl.h>
+#include <asm/global_data.h>
+#include <asm/io.h>
+#include <asm/arch/imx93_pins.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/sys_proto.h>
+#include <asm/mach-imx/boot_mode.h>
+#include <asm/mach-imx/mxc_i2c.h>
+#include <asm/arch-mx7ulp/gpio.h>
+#include <asm/mach-imx/syscounter.h>
+#include <asm/mach-imx/ele_api.h>
+#include <dm/uclass.h>
+#include <dm/device.h>
+#include <dm/uclass-internal.h>
+#include <dm/device-internal.h>
+#include <linux/delay.h>
+#include <asm/arch/clock.h>
+#include <asm/arch/ccm_regs.h>
+#include <asm/arch/ddr.h>
+#include <power/pmic.h>
+#include <power/pca9450.h>
+#include <power/pf0900.h>
+#include <asm/arch/trdc.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+int spl_board_boot_device(enum boot_device boot_dev_spl)
+{
+#ifdef CONFIG_SPL_BOOTROM_SUPPORT
+	return BOOT_DEVICE_BOOTROM;
+#else
+	switch (boot_dev_spl) {
+	case SD1_BOOT:
+	case MMC1_BOOT:
+		return BOOT_DEVICE_MMC1;
+	case SD2_BOOT:
+	case MMC2_BOOT:
+		return BOOT_DEVICE_MMC2;
+	default:
+		return BOOT_DEVICE_NONE;
+	}
+#endif
+}
+
+void spl_board_init(void)
+{
+	int ret;
+
+	puts("Normal Boot\n");
+
+	ret = ahab_start_rng();
+	if (ret)
+		printf("Fail to start RNG: %d\n", ret);
+}
+
+void spl_dram_init(void)
+{
+	ddr_init(&dram_timing);
+}
+
+#if CONFIG_IS_ENABLED(DM_PMIC_PCA9450)
+int power_init_board(void)
+{
+	struct udevice *dev;
+	int ret;
+	unsigned int val = 0, buck_val;
+
+	ret = pmic_get("pmic@25", &dev);
+	if (ret != 0) {
+		puts("ERROR: Get PMIC PCA9451A failed!\n");
+		return ret;
+	}
+	puts("PMIC: PCA9451A\n");
+	/* BUCKxOUT_DVS0/1 control BUCK123 output */
+	pmic_reg_write(dev, PCA9450_BUCK123_DVS, 0x29);
+
+	/* enable DVS control through PMIC_STBY_REQ */
+	pmic_reg_write(dev, PCA9450_BUCK1CTRL, 0x59);
+
+	ret = pmic_reg_read(dev, PCA9450_PWR_CTRL);
+	if (ret < 0)
+		return ret;
+	else
+		val = ret;
+
+	if (is_voltage_mode(VOLT_LOW_DRIVE)) {
+		buck_val = 0x0c; /* 0.8v for Low drive mode */
+		printf("PMIC: Low Drive Voltage Mode\n");
+	} else if (is_voltage_mode(VOLT_NOMINAL_DRIVE)) {
+		buck_val = 0x10; /* 0.85v for Nominal drive mode */
+		printf("PMIC: Nominal Voltage Mode\n");
+	} else {
+		buck_val = 0x14; /* 0.9v for Over drive mode */
+		printf("PMIC: Over Drive Voltage Mode\n");
+	}
+
+	if (val & PCA9450_REG_PWRCTRL_TOFF_DEB) {
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS0, buck_val);
+		pmic_reg_write(dev, PCA9450_BUCK3OUT_DVS0, buck_val);
+	} else {
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS0, buck_val + 0x4);
+		pmic_reg_write(dev, PCA9450_BUCK3OUT_DVS0, buck_val + 0x4);
+	}
+
+	if (IS_ENABLED(CONFIG_IMX93_EVK_LPDDR4)) {
+		/* Set VDDQ to 1.1V from buck2 */
+		pmic_reg_write(dev, PCA9450_BUCK2OUT_DVS0, 0x28);
+	}
+
+	/* set standby voltage to 0.65v */
+	if (val & PCA9450_REG_PWRCTRL_TOFF_DEB)
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS1, 0x0);
+	else
+		pmic_reg_write(dev, PCA9450_BUCK1OUT_DVS1, 0x4);
+
+	/* I2C_LT_EN*/
+	pmic_reg_write(dev, 0xa, 0x3);
+	return 0;
+}
+#endif
+
+extern int imx9_probe_mu(void *ctx, struct event *event);
+void board_init_f(ulong dummy)
+{
+	int ret;
+
+	/* Clear the BSS. */
+	memset(__bss_start, 0, __bss_end - __bss_start);
+
+	timer_init();
+
+	arch_cpu_init();
+
+	board_early_init_f();
+
+	spl_early_init();
+
+	preloader_console_init();
+
+	ret = imx9_probe_mu(NULL, NULL);
+	if (ret) {
+		printf("Fail to init ELE API\n");
+	} else {
+		printf("SOC: 0x%x\n", gd->arch.soc_rev);
+		printf("LC: 0x%x\n", gd->arch.lifecycle);
+	}
+
+	clock_init_late();
+
+	power_init_board();
+
+	if (!is_voltage_mode(VOLT_LOW_DRIVE))
+		set_arm_core_max_clk();
+
+	/* Init power of mix */
+	soc_power_init();
+
+	/* Setup TRDC for DDR access */
+	trdc_init();
+
+	/* DDR initialization */
+	spl_dram_init();
+
+	/* Put M33 into CPUWAIT for following kick */
+	ret = m33_prepare();
+	if (!ret)
+		printf("M33 prepare ok\n");
+
+	board_init_r(NULL, 0);
+}
+
+#ifdef CONFIG_ANDROID_SUPPORT
+int board_get_emmc_id(void) {
+	return 0;
+}
+#endif
diff --git a/configs/iesy_imx93_eva_mi_defconfig b/configs/iesy_imx93_eva_mi_defconfig
new file mode 100644
index 00000000000..bc23d9bbaf7
--- /dev/null
+++ b/configs/iesy_imx93_eva_mi_defconfig
@@ -0,0 +1,190 @@
+CONFIG_ARM=y
+CONFIG_ARCH_IMX9=y
+CONFIG_TEXT_BASE=0x80200000
+CONFIG_SYS_MALLOC_LEN=0x2000000
+CONFIG_SYS_MALLOC_F_LEN=0x18000
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_NR_DRAM_BANKS=2
+CONFIG_ENV_SIZE=0x4000
+CONFIG_ENV_OFFSET=0x700000
+CONFIG_DM_GPIO=y
+CONFIG_DEFAULT_DEVICE_TREE="iesy-imx93-eva-mi"
+CONFIG_SPL_TEXT_BASE=0x2049A000
+CONFIG_TARGET_IESY_IMX93_EVA_MI=y
+CONFIG_SYS_PROMPT="u-boot=> "
+CONFIG_SPL_SERIAL=y
+CONFIG_SPL_DRIVERS_MISC=y
+CONFIG_SPL_STACK=0x20519dd0
+CONFIG_SPL=y
+CONFIG_CMD_DEKBLOB=y
+CONFIG_SPL_IMX_ROMAPI_LOADADDR=0x88000000
+CONFIG_SPL_LOAD_IMX_CONTAINER=y
+CONFIG_SYS_LOAD_ADDR=0x80400000
+CONFIG_SYS_MEMTEST_START=0x80000000
+CONFIG_SYS_MEMTEST_END=0x90000000
+CONFIG_REMAKE_ELF=y
+CONFIG_SYS_MONITOR_LEN=524288
+CONFIG_FIT=y
+CONFIG_FIT_SIGNATURE=y
+CONFIG_OF_SYSTEM_SETUP=y
+CONFIG_DISTRO_DEFAULTS=y
+CONFIG_BOOTCOMMAND="run sr_ir_v2_cmd;run distro_bootcmd;run bsp_bootcmd"
+CONFIG_DEFAULT_FDT_FILE="iesy-imx93-eva-mi.dtb"
+CONFIG_ARCH_MISC_INIT=y
+CONFIG_BOARD_EARLY_INIT_F=y
+CONFIG_BOARD_LATE_INIT=y
+CONFIG_SPL_MAX_SIZE=0x26000
+CONFIG_SPL_HAS_BSS_LINKER_SECTION=y
+CONFIG_SPL_BSS_START_ADDR=0x2051a000
+CONFIG_SPL_BSS_MAX_SIZE=0x2000
+CONFIG_SPL_BOARD_INIT=y
+CONFIG_SPL_BOOTROM_SUPPORT=y
+# CONFIG_SPL_SHARES_INIT_SP_ADDR is not set
+CONFIG_SYS_SPL_MALLOC=y
+CONFIG_HAS_CUSTOM_SPL_MALLOC_START=y
+CONFIG_CUSTOM_SYS_SPL_MALLOC_ADDR=0x83200000
+CONFIG_SYS_SPL_MALLOC_SIZE=0x80000
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR=y
+CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR=0x1040
+CONFIG_SPL_I2C=y
+CONFIG_SPL_POWER=y
+CONFIG_SPL_WATCHDOG=y
+CONFIG_SYS_MAXARGS=64
+CONFIG_SYS_CBSIZE=2048
+CONFIG_SYS_PBSIZE=2074
+CONFIG_CMD_ERASEENV=y
+CONFIG_CMD_NVEDIT_EFI=y
+CONFIG_CRC32_VERIFY=y
+CONFIG_CMD_MEMTEST=y
+CONFIG_CMD_CLK=y
+CONFIG_CMD_DFU=y
+CONFIG_CMD_FUSE=y
+CONFIG_CMD_GPIO=y
+CONFIG_CMD_I2C=y
+CONFIG_CMD_MMC=y
+CONFIG_CMD_OPTEE_RPMB=y
+CONFIG_CMD_POWEROFF=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_USB_MASS_STORAGE=y
+CONFIG_CMD_SNTP=y
+CONFIG_CMD_BMP=y
+CONFIG_CMD_CACHE=y
+CONFIG_CMD_EFIDEBUG=y
+CONFIG_CMD_RTC=y
+CONFIG_CMD_TIME=y
+CONFIG_CMD_GETTIME=y
+CONFIG_CMD_TIMER=y
+CONFIG_CMD_REGULATOR=y
+CONFIG_CMD_HASH=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_OF_CONTROL=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_ENV_OVERWRITE=y
+CONFIG_ENV_IS_NOWHERE=y
+CONFIG_ENV_IS_IN_MMC=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_SYS_MMC_ENV_DEV=1
+CONFIG_USE_ETHPRIME=y
+CONFIG_ETHPRIME="eth1"
+CONFIG_NET_RANDOM_ETHADDR=y
+CONFIG_SPL_DM=y
+CONFIG_SYSCON=y
+CONFIG_SPL_CLK_IMX93=y
+CONFIG_CLK_IMX93=y
+CONFIG_DFU_MMC=y
+CONFIG_DFU_RAM=y
+CONFIG_USB_FUNCTION_FASTBOOT=y
+CONFIG_UDP_FUNCTION_FASTBOOT=y
+CONFIG_FASTBOOT_BUF_ADDR=0x82800000
+CONFIG_FASTBOOT_BUF_SIZE=0x20000000
+CONFIG_FASTBOOT_FLASH=y
+CONFIG_FASTBOOT_UUU_SUPPORT=y
+CONFIG_IMX_RGPIO2P=y
+CONFIG_DM_PCA953X=y
+CONFIG_ADP5585_GPIO=y
+CONFIG_DM_I2C=y
+CONFIG_SYS_I2C_IMX_LPI2C=y
+CONFIG_SUPPORT_EMMC_RPMB=y
+CONFIG_SUPPORT_EMMC_BOOT=y
+CONFIG_MMC_IO_VOLTAGE=y
+CONFIG_MMC_UHS_SUPPORT=y
+CONFIG_MMC_HS400_ES_SUPPORT=y
+CONFIG_MMC_HS400_SUPPORT=y
+CONFIG_FSL_USDHC=y
+CONFIG_DM_SPI_FLASH=y
+CONFIG_SF_DEFAULT_SPEED=40000000
+CONFIG_SPI_FLASH_STMICRO=y
+CONFIG_PHY_REALTEK=y
+CONFIG_DM_ETH_PHY=y
+CONFIG_PHY_GIGE=y
+CONFIG_DWC_ETH_QOS=y
+CONFIG_DWC_ETH_QOS_IMX=y
+CONFIG_FEC_MXC=y
+CONFIG_MII=y
+CONFIG_MIPI_DPHY_HELPERS=y
+CONFIG_PHY_IMX93_MIPI_DPHY=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_IMX93=y
+CONFIG_POWER_DOMAIN=y
+CONFIG_IMX93_BLK_CTRL=y
+CONFIG_DM_PMIC=y
+CONFIG_DM_PMIC_PCA9450=y
+CONFIG_SPL_DM_PMIC_PCA9450=y
+CONFIG_DM_REGULATOR=y
+CONFIG_DM_REGULATOR_PCA9450=y
+CONFIG_DM_REGULATOR_FIXED=y
+CONFIG_DM_REGULATOR_GPIO=y
+CONFIG_DM_RTC=y
+CONFIG_RTC_PCF2131=y
+CONFIG_RTC_EMULATION=y
+CONFIG_DM_SERIAL=y
+CONFIG_FSL_LPUART=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_NXP_FSPI=y
+CONFIG_SYSRESET=y
+CONFIG_SYSRESET_PSCI=y
+CONFIG_TEE=y
+CONFIG_OPTEE=y
+CONFIG_DM_THERMAL=y
+CONFIG_IMX_TMU=y
+CONFIG_USB=y
+CONFIG_USB_EHCI_HCD=y
+CONFIG_USB_HOST_ETHER=y
+CONFIG_USB_ETHER_ASIX=y
+CONFIG_USB_ETHER_RTL8152=y
+CONFIG_USB_GADGET=y
+CONFIG_USB_GADGET_MANUFACTURER="FSL"
+CONFIG_USB_GADGET_VENDOR_NUM=0x1fc9
+CONFIG_USB_GADGET_PRODUCT_NUM=0x0152
+CONFIG_CI_UDC=y
+CONFIG_USB_PORT_AUTO=y
+CONFIG_VIDEO=y
+CONFIG_VIDEO_LOGO=y
+CONFIG_SYS_WHITE_ON_BLACK=y
+CONFIG_VIDEO_LCD_RAYDIUM_RM67191=y
+CONFIG_VIDEO_IMX_DW_DSI=y
+CONFIG_VIDEO_IMX_LCDIFV3=y
+CONFIG_SPLASH_SCREEN=y
+CONFIG_SPLASH_SCREEN_ALIGN=y
+CONFIG_BMP_16BPP=y
+CONFIG_BMP_24BPP=y
+CONFIG_BMP_32BPP=y
+CONFIG_VIDEO_ADV7535=y
+CONFIG_ULP_WATCHDOG=y
+CONFIG_SPL_RSA=y
+CONFIG_SHA384=y
+CONFIG_LEGACY_IMAGE_FORMAT=y
+CONFIG_LZO=y
+CONFIG_BZIP2=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_EFI_MM_COMM_TEE=y
+CONFIG_EFI_VAR_BUF_SIZE=139264
+CONFIG_EFI_SET_TIME=y
+CONFIG_EFI_RUNTIME_UPDATE_CAPSULE=y
+CONFIG_EFI_CAPSULE_ON_DISK=y
+CONFIG_EFI_IGNORE_OSINDICATIONS=y
+CONFIG_EFI_CAPSULE_FIRMWARE_RAW=y
+CONFIG_EFI_CAPSULE_AUTHENTICATE=y
diff --git a/include/configs/iesy_imx93_eva_mi.h b/include/configs/iesy_imx93_eva_mi.h
new file mode 100644
index 00000000000..218b8a9dfe6
--- /dev/null
+++ b/include/configs/iesy_imx93_eva_mi.h
@@ -0,0 +1,187 @@
+/* SPDX-License-Identifier: GPL-2.0+ */
+/*
+ * Copyright 2022 NXP
+ */
+
+#ifndef __IMX93_EVK_H
+#define __IMX93_EVK_H
+
+#include <linux/sizes.h>
+#include <linux/stringify.h>
+#include <asm/arch/imx-regs.h>
+#include "imx_env.h"
+
+#define CFG_SYS_UBOOT_BASE	\
+	(QSPI0_AMBA_BASE + CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR * 512)
+
+#ifdef CONFIG_AHAB_BOOT
+#define AHAB_ENV "sec_boot=yes\0"
+#else
+#define AHAB_ENV "sec_boot=no\0"
+#endif
+
+#ifdef CONFIG_DISTRO_DEFAULTS
+#define BOOT_TARGET_DEVICES(func) \
+	func(MMC, mmc, 0) \
+	func(MMC, mmc, 1) \
+	func(USB, usb, 0)
+
+#include <config_distro_bootcmd.h>
+#else
+#define BOOTENV
+#endif
+
+#define JH_ROOT_DTB    "imx93-11x11-evk-root.dtb"
+
+#define JAILHOUSE_ENV \
+	"jh_root_dtb=" JH_ROOT_DTB "\0" \
+	"jh_mmcboot=setenv fdtfile ${jh_root_dtb}; " \
+		    "setenv jh_clk clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe; " \
+		    "if run loadimage; then run mmcboot;" \
+		    "else run jh_netboot; fi; \0" \
+	"jh_netboot=setenv fdtfile ${jh_root_dtb}; " \
+		    "setenv jh_clk clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe; run netboot; \0 "
+
+#define SR_IR_V2_COMMAND \
+	"nodes=/usbg1 /usbg2 /wdt-reboot /rm67199_panel /dsi-host /display-subsystem /soc@0/bus@44000000/dma-controller@44000000 /soc@0/bus@44000000/sai@443b0000 /soc@0/bus@44000000/mqs1 /soc@0/bus@44000000/bbnsm@44440000 /soc@0/bus@44000000/system-controller@44460000 /soc@0/bus@44000000/tmu@44482000 /soc@0/bus@44000000/micfil@44520000 /soc@0/bus@42000000/dma-controller@42000000 /soc@0/bus@44000000/i3c-master@44330000 /soc@0/bus@42000000/i3c-master@42520000 /soc@0/bus@42000000/sai@42650000 /soc@0/bus@42000000/sai@42660000 /soc@0/bus@42000000/mqs2 /soc@0/bus@42000000/xcvr@42680000 /soc@0/bus@42000000/flexio@425c0000 /soc@0/bus@42800000/epxp@4ae20000 /soc@0/bus@42800000/camera /soc@0/efuse@47510000 /soc@0/system-controller@4ac10000 /soc@0/ldb@4ac10020 /soc@0/phy@4ac10024 /soc@0/ele-mu /soc@0/dsi@4ae10000 /soc@0/lcd-controller@4ae30000 /soc@0/blk-ctrl@4e010000 /soc@0/memory-controller@4e300000 /soc@0/bus@44000000/i2c@44350000/pmic@25 /imx93-lpm  \0" \
+	"sr_ir_v2_cmd=cp.b ${fdtcontroladdr} ${fdt_addr_r} 0x10000;"\
+	"fdt addr ${fdt_addr_r};"\
+	"fdt resize 0x400;"\
+	"fdt set /soc@0/bus@44000000/i2c@44350000/gpio@34 compatible adi,adp5585;" \
+	"for i in ${nodes}; do fdt rm ${i}; done \0"
+
+#define CFG_MFG_ENV_SETTINGS \
+	CFG_MFG_ENV_SETTINGS_DEFAULT \
+	"initrd_addr=0x83800000\0" \
+	"initrd_high=0xffffffffffffffff\0" \
+	"emmc_dev=0\0"\
+	"sd_dev=1\0" \
+
+/* Initial environment variables */
+#define CFG_EXTRA_ENV_SETTINGS		\
+	JAILHOUSE_ENV \
+	CFG_MFG_ENV_SETTINGS \
+	BOOTENV \
+	AHAB_ENV \
+	SR_IR_V2_COMMAND \
+	"prepare_mcore=setenv mcore_clk clk-imx93.mcore_booted;\0" \
+	"scriptaddr=0x83500000\0" \
+	"kernel_addr_r=" __stringify(CONFIG_SYS_LOAD_ADDR) "\0" \
+	"image=Image\0" \
+	"splashimage=0x90000000\0" \
+	"console=ttyLP0,115200 earlycon\0" \
+	"fdt_addr_r=0x83000000\0"			\
+	"fdt_addr=0x83000000\0"			\
+	"fdt_high=0xffffffffffffffff\0"		\
+	"cntr_addr=0x98000000\0"			\
+	"cntr_file=os_cntr_signed.bin\0" \
+	"boot_fit=no\0" \
+	"fdtfile=" CONFIG_DEFAULT_FDT_FILE "\0" \
+	"bootm_size=0x10000000\0" \
+	"mmcdev=" __stringify(CONFIG_SYS_MMC_ENV_DEV)"\0" \
+	"mmcpart=1\0" \
+	"mmcroot=/dev/mmcblk1p2 rootwait rw\0" \
+	"mmcautodetect=yes\0" \
+	"mmcargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=${mmcroot}\0 " \
+	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
+	"bootscript=echo Running bootscript from mmc ...; " \
+		"source\0" \
+	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
+	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}\0" \
+	"loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
+	"auth_os=auth_cntr ${cntr_addr}\0" \
+	"boot_os=booti ${loadaddr} - ${fdt_addr_r};\0" \
+	"mmcboot=echo Booting from mmc ...; " \
+		"run mmcargs; " \
+		"if test ${sec_boot} = yes; then " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"if test ${boot_fit} = yes || test ${boot_fit} = try; then " \
+				"bootm ${loadaddr}; " \
+			"else " \
+				"if run loadfdt; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi;" \
+		"fi;\0" \
+	"netargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} " \
+		"root=/dev/nfs " \
+		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
+	"netboot=echo Booting from net ...; " \
+		"run netargs;  " \
+		"if test ${ip_dyn} = yes; then " \
+			"setenv get_cmd dhcp; " \
+		"else " \
+			"setenv get_cmd tftp; " \
+		"fi; " \
+		"if test ${sec_boot} = yes; then " \
+			"${get_cmd} ${cntr_addr} ${cntr_file}; " \
+			"if run auth_os; then " \
+				"run boot_os; " \
+			"else " \
+				"echo ERR: failed to authenticate; " \
+			"fi; " \
+		"else " \
+			"${get_cmd} ${loadaddr} ${image}; " \
+			"if test ${boot_fit} = yes || test ${boot_fit} = try; then " \
+				"bootm ${loadaddr}; " \
+			"else " \
+				"if ${get_cmd} ${fdt_addr_r} ${fdtfile}; then " \
+					"run boot_os; " \
+				"else " \
+					"echo WARN: Cannot load the DT; " \
+				"fi; " \
+			"fi;" \
+		"fi;\0" \
+	"bsp_bootcmd=echo Running BSP bootcmd ...; " \
+		"mmc dev ${mmcdev}; if mmc rescan; then " \
+		   "if run loadbootscript; then " \
+			   "run bootscript; " \
+		   "else " \
+			   "if test ${sec_boot} = yes; then " \
+				   "if run loadcntr; then " \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+			    "else " \
+				   "if run loadimage; then " \
+					   "run mmcboot; " \
+				   "else run netboot; " \
+				   "fi; " \
+				"fi; " \
+		   "fi; " \
+	   "fi;"
+
+/* Link Definitions */
+
+#define CFG_SYS_INIT_RAM_ADDR        0x80000000
+#define CFG_SYS_INIT_RAM_SIZE        0x200000
+
+#define CFG_SYS_SDRAM_BASE           0x80000000
+#define PHYS_SDRAM                      0x80000000
+#define PHYS_SDRAM_SIZE			0x80000000 /* 2GB DDR */
+
+#define CFG_SYS_FSL_USDHC_NUM	2
+
+/* Using ULP WDOG for reset */
+#define WDOG_BASE_ADDR          WDG3_BASE_ADDR
+
+#if defined(CONFIG_CMD_NET)
+#define PHY_ANEG_TIMEOUT 20000
+#endif
+
+#ifdef CONFIG_IMX_MATTER_TRUSTY
+#define NS_ARCH_ARM64 1
+#endif
+
+#ifdef CONFIG_ANDROID_SUPPORT
+#include "imx93_evk_android.h"
+#endif
+
+#endif
-- 
2.30.2

