From 0095a0351c31ccc83f9a65ee54a9e0f9c048b4bb Mon Sep 17 00:00:00 2001
From: Christian Biermann <bie@iesy.com>
Date: Mon, 23 Sep 2024 16:18:32 +0200
Subject: [PATCH 1/1] driver: spi: slow down spi speed of bitbanging driver

---
 drivers/spi/Kconfig    | 17 +++++++++++++++++
 drivers/spi/spi-gpio.c |  5 +++++
 2 files changed, 22 insertions(+)

diff --git a/drivers/spi/Kconfig b/drivers/spi/Kconfig
index d4b969e68c31..690844b635c6 100644
--- a/drivers/spi/Kconfig
+++ b/drivers/spi/Kconfig
@@ -421,6 +421,23 @@ config SPI_GPIO
 	  GPIO operations, you should be able to leverage that for better
 	  speed with a custom version of this driver; see the source code.
 
+config SLOWER_SPI_GPIO
+	bool "Enable delays in the GPIO-based bitbanging SPI Master"
+	default n
+	depends on SPI_GPIO
+	help
+	  The GPIO bitbanging SPI master driver will run without any delays if this
+	  option is not set. This option will enable the use of delays in the
+	  operation of the GPIO bitbanging SPI master implementation to honour the
+	  maximum speed of very slow devices.
+
+	  To configure slow speed devices your board-specific setup logic must also
+	  provide platform data assigning the speed for a device on a given chip
+	  select of the GPIO bitbanging SPI master.
+
+	  If your platform requires SPI buses driven at slow speeds select yes. If
+	  in doubt, select no.
+
 config SPI_IMG_SPFI
 	tristate "IMG SPFI controller"
 	depends on MIPS || COMPILE_TEST
diff --git a/drivers/spi/spi-gpio.c b/drivers/spi/spi-gpio.c
index 9c8c7948044e..b572870bae74 100644
--- a/drivers/spi/spi-gpio.c
+++ b/drivers/spi/spi-gpio.c
@@ -7,6 +7,7 @@
  */
 #include <linux/kernel.h>
 #include <linux/module.h>
+#include <linux/delay.h>
 #include <linux/platform_device.h>
 #include <linux/gpio/consumer.h>
 #include <linux/of.h>
@@ -108,6 +109,9 @@ static inline int getmiso(const struct spi_device *spi)
 		return !!gpiod_get_value_cansleep(spi_gpio->miso);
 }
 
+#ifdef CONFIG_SLOWER_SPI_GPIO
+#define spidelay(nsecs) ndelay(nsecs / 10)
+#else
 /*
  * NOTE:  this clocks "as fast as we can".  It "should" be a function of the
  * requested device clock.  Software overhead means we usually have trouble
@@ -115,6 +119,7 @@ static inline int getmiso(const struct spi_device *spi)
  * we'll just assume we never need additional per-bit slowdowns.
  */
 #define spidelay(nsecs)	do {} while (0)
+#endif
 
 #include "spi-bitbang-txrx.h"
 
-- 
2.30.2

