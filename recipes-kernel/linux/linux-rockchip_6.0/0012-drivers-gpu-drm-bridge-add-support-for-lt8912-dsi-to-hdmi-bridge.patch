From b1dc5638760285060540ae97f216d6edc70d0fdc Mon Sep 17 00:00:00 2001
From: Christian Biermann <bie@iesy.com>
Date: Wed, 31 May 2023 14:10:57 +0200
Subject: [PATCH 1/1] drivers: gpu: drm: bridge: add support for lt8912 dsi to
 hdmi bridge

---
 .../arm64/boot/dts/iesy/iesy-rpx30-eva-mi.dts |  22 +-
 drivers/gpu/drm/bridge/Kconfig                |   8 +
 drivers/gpu/drm/bridge/Makefile               |   1 +
 drivers/gpu/drm/bridge/lt8912-i2c.c           | 657 ++++++++++++++++++
 4 files changed, 677 insertions(+), 11 deletions(-)
 create mode 100644 drivers/gpu/drm/bridge/lt8912-i2c.c

diff --git a/arch/arm64/boot/dts/iesy/iesy-rpx30-eva-mi.dts b/arch/arm64/boot/dts/iesy/iesy-rpx30-eva-mi.dts
index 77218728d850..787fd9473036 100644
--- a/arch/arm64/boot/dts/iesy/iesy-rpx30-eva-mi.dts
+++ b/arch/arm64/boot/dts/iesy/iesy-rpx30-eva-mi.dts
@@ -147,11 +147,11 @@ &cpu0 {
 };
 
 &display_subsystem {
-//	status = "okay";
+	status = "okay";
 };
 
 &dsi {
-//	status = "okay";
+	status = "okay";
 	rockchip,lane-rate = <891>;
 
 	panel@0 {
@@ -242,7 +242,7 @@ dsi_out_panel: endpoint {
 };
 
 &dsi_in_vopb {
-//	status = "okay";
+	status = "okay";
 };
 
 &dsi_in_vopl {
@@ -260,16 +260,16 @@ &cpu0 {
 };
 
 /* DDR PHY Interface - used for DDR monitoring */
-//&dfi {
-//	status = "okay";
-//};
+&dfi {
+	status = "okay";
+};
 
 /* Dynamic Memory Controller */
-//&dmc {
-//	center-supply = <&vdd_logic>;
-//	auto-freq-en = <0>;
-//	status = "okay";
-//};
+&dmc {
+	center-supply = <&vdd_logic>;
+	auto-freq-en = <0>;
+	status = "okay";
+};
 
 /* eMMC on CM006 */
 &emmc {
diff --git a/drivers/gpu/drm/bridge/Kconfig b/drivers/gpu/drm/bridge/Kconfig
index 2a6ce8e78eb1..729e82fc7645 100644
--- a/drivers/gpu/drm/bridge/Kconfig
+++ b/drivers/gpu/drm/bridge/Kconfig
@@ -318,6 +318,14 @@ config DRM_TI_TPD12S015
 	  Texas Instruments TPD12S015 HDMI level shifter and ESD protection
 	  driver.
 
+config DRM_LONTIUM_LT8912_I2C
+	tristate "Lontium LT8912 MIPI-DSI to HDMI bridge as i2c-only driver"
+	depends on OF
+	select DRM_KMS_HELPER
+	select REGMAP_I2C
+	help
+	  Lontium LT8912 MIPI-DSI to HDMI bridge as i2c-only driver.
+
 source "drivers/gpu/drm/bridge/analogix/Kconfig"
 
 source "drivers/gpu/drm/bridge/adv7511/Kconfig"
diff --git a/drivers/gpu/drm/bridge/Makefile b/drivers/gpu/drm/bridge/Makefile
index bf384678fc6d..2c930718808c 100644
--- a/drivers/gpu/drm/bridge/Makefile
+++ b/drivers/gpu/drm/bridge/Makefile
@@ -31,6 +31,7 @@ obj-$(CONFIG_DRM_TI_SN65DSI86) += ti-sn65dsi86.o
 obj-$(CONFIG_DRM_TI_TFP410) += ti-tfp410.o
 obj-$(CONFIG_DRM_TI_TPD12S015) += ti-tpd12s015.o
 obj-$(CONFIG_DRM_NWL_MIPI_DSI) += nwl-dsi.o
+obj-$(CONFIG_DRM_LONTIUM_LT8912_I2C) += lt8912-i2c.o
 obj-y += analogix/
 obj-y += cadence/
 obj-y += synopsys/
diff --git a/drivers/gpu/drm/bridge/lt8912-i2c.c b/drivers/gpu/drm/bridge/lt8912-i2c.c
new file mode 100644
index 000000000000..8bafc8f78189
--- /dev/null
+++ b/drivers/gpu/drm/bridge/lt8912-i2c.c
@@ -0,0 +1,657 @@
+/* Copyright (c) 2017, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details. *
+ */
+
+#include <linux/types.h>
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/platform_device.h>
+#include <linux/fs.h>
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/gpio.h>
+#include <linux/interrupt.h>
+#include <linux/of_gpio.h>
+#include <linux/of_irq.h>
+#include <linux/pm.h>
+#include <linux/pm_runtime.h>
+#include <linux/regulator/consumer.h>
+#include <linux/regmap.h>
+#include <linux/of_platform.h>
+#include <linux/kobject.h>
+
+
+#define STRING_OFF         "off"
+#define STRING_ON          "on"
+
+#define Video_Output_Mode  Output_RGB888
+
+enum video_format
+{
+ video_640x480_60Hz_vic1,       //vic 1
+ video_720x480_60Hz_vic3,       //vic 2
+ video_1280x720_60Hz_vic4,      //vic 3
+ video_1920x1080_60Hz_vic16,    //vic 4
+ 
+ video_1920x1080i_60Hz_169=5,  //vic 5
+ video_720x480i_60Hz_43=6,     //vic 6
+ video_720x480i_60Hz_169=7,    //vic 7
+ video_720x240P_60Hz_43=8,     //vic 8
+ video_720x240P_60Hz_169=9,    //vic 9
+ video_1920x1080_30Hz_vic, 
+ video_1280x720_30Hz_vic,
+ 
+ video_3840x2160_30Hz_vic,
+ video_3840x1080_60Hz_vic,
+ video_1024x600_60Hz_vic,
+ video_none
+};
+
+struct video_timing {
+	int hfp;
+	int hs;
+	int	hbp;
+	int hact;
+	int htotal;
+	int vfp;
+	int vs;
+	int vbp;
+	int vact;
+	int vtotal;
+	int pclk_khz;
+	int hs_positive;
+	int vs_positive;
+};
+
+struct lontium_ic_mode {
+int mipi_port_cnt; //1 or 2
+int mipi_lane_cnt; //1 or 2 or 4
+bool mipi_mode;   //dsi or csi
+int video_mode;    //Non-Burst Mode with Sync Pulses; Non-Burst Mode with Sync Events
+bool audio_out;   //i2s or spdif
+bool hdmi_coupling_mode;//ac_mode or dc_mode
+bool hdcp_encryption; //hdcp_enable or hdcp_diable
+};
+
+											//  hfp, hs, hbp, hact,htotal,vfp, vs, vbp, vact,vtotal, pclk_khz, hs_pos, vs_pos
+struct video_timing video_640x480_60Hz		= {   8, 96,  40,  640,   800, 33,  2,  10,  480,   525,  25000,        0,      0 };
+struct video_timing video_720x480_60Hz		= {  16, 62,  60,  720,   858,  9,  6,  30,  480,   525,  27000,        0,      0 };
+struct video_timing video_1280x720_60Hz		= { 110, 40, 220, 1280,  1650,  5,  5,  20,  720,   750,  49500,        1,      1 };
+struct video_timing video_1280x720_30Hz		= { 110, 40, 220, 1280,  1650,  5,  5,  20,  720,   750,  37125,        1,      1 };
+struct video_timing video_1920x1080_30Hz	= {  88, 44, 148, 1920,  2200,  4,  5,  36, 1080,  1125,  74250,        1,      1 };
+struct video_timing video_1920x1080_60Hz	= {  88, 44, 148, 1920,  2200,  4,  5,  36, 1080,  1125, 148500,        1,      1 };
+struct video_timing video_3840x1080_60Hz	= { 176, 88, 296, 3840,  4400,  4,  5,  36, 1080,  1125, 297000,        1,      1 };
+struct video_timing video_3840x2160_30Hz	= { 176, 88, 296, 3840,  4400,  8, 10,  72, 2160,  2250, 297000,        1,      1 };
+struct video_timing video_1024x600_60Hz		= {  60, 60, 100, 1024,  1154,  2,  5,  10,  600,   617,  34000,        1,      1 };
+
+struct video_timing *video;
+
+enum {
+	LT8912_AUDIO_NONE,
+	LT8912_AUDIO_SPDIF,
+	LT8912_AUDIO_I2S
+};
+
+struct lt8912 {
+	struct gpio_desc *reset_n;
+    struct regmap *regmap[3];
+	struct video_timing *video;
+	int mipi_lane_cnt;
+	bool is_dual;
+	bool audio_status;
+	int  hfp;
+	int hs_width;
+	int hbp;
+	int h_act;
+	int h_tal;
+	int vfp;
+	int vs_width;
+	int vbp;
+	int v_act;
+	int v_tal;
+	int mipi_video_format;
+	enum video_format video_format;
+	int hdmi_vic;
+	int hdmi_y;    //0x00:RGB, 0x01:YCbCr422 0x02:YCbCr 444
+    u8 sink_edid[256];
+	u8 audio_mode;					/* selected audio mode - valid only for HDMI output */
+	bool swap_mipi_pn;
+};
+
+
+static void lt8912_dds_config(struct lt8912 *lt)
+{
+	pr_debug("lt8912_dds_config() called\n");
+
+	/* DDSConfig */
+	regmap_write(lt->regmap[1], 0x4e, 0x6a); // RGD_MIPIRX_STRM_SW_FREQ_ WORD[7:0]
+	regmap_write(lt->regmap[1], 0x4f, 0xad); // RGD_MIPIRX_STRM_SW_FREQ_ WORD[15:8]
+	regmap_write(lt->regmap[1], 0x50, 0xf3); // RGD_MIPIRX_STRM_SW_FREQ_ WORD[23:16]
+	regmap_write(lt->regmap[1], 0x51, 0x80); // Bit 0: RGD_MIPIRX_STRM_SW_FREQ_ WORD[24]
+											 // Bit 6: RGD_MIPIRX_STRM_ERR_CLR 
+											 // Bit 7: RGD_MIPIRX_STRM_SW_FREQ_ WORD_EN
+
+	regmap_write(lt->regmap[1], 0x1f, 0x5e);
+	regmap_write(lt->regmap[1], 0x20, 0x01);
+	regmap_write(lt->regmap[1], 0x21, 0x2c);
+	regmap_write(lt->regmap[1], 0x22, 0x01);
+	regmap_write(lt->regmap[1], 0x23, 0xfa);
+	regmap_write(lt->regmap[1], 0x24, 0x00);
+	regmap_write(lt->regmap[1], 0x25, 0xc8);
+	regmap_write(lt->regmap[1], 0x26, 0x00);
+	regmap_write(lt->regmap[1], 0x27, 0x5e);
+	regmap_write(lt->regmap[1], 0x28, 0x01);
+	regmap_write(lt->regmap[1], 0x29, 0x2c);
+	regmap_write(lt->regmap[1], 0x2a, 0x01);
+	regmap_write(lt->regmap[1], 0x2b, 0xfa);
+	regmap_write(lt->regmap[1], 0x2c, 0x00);
+	regmap_write(lt->regmap[1], 0x2d, 0xc8);
+	regmap_write(lt->regmap[1], 0x2e, 0x00);
+	regmap_write(lt->regmap[1], 0x42, 0x64);
+	regmap_write(lt->regmap[1], 0x43, 0x00);
+	regmap_write(lt->regmap[1], 0x44, 0x04);
+	regmap_write(lt->regmap[1], 0x45, 0x00);
+	regmap_write(lt->regmap[1], 0x46, 0x59);
+	regmap_write(lt->regmap[1], 0x47, 0x00);
+	regmap_write(lt->regmap[1], 0x48, 0xf2);
+	regmap_write(lt->regmap[1], 0x49, 0x06);
+	regmap_write(lt->regmap[1], 0x4a, 0x00);
+	regmap_write(lt->regmap[1], 0x4b, 0x72);
+	regmap_write(lt->regmap[1], 0x4c, 0x45);
+	regmap_write(lt->regmap[1], 0x4d, 0x00);
+	regmap_write(lt->regmap[1], 0x52, 0x08);
+	regmap_write(lt->regmap[1], 0x53, 0x00);
+	regmap_write(lt->regmap[1], 0x54, 0xb2);
+	regmap_write(lt->regmap[1], 0x55, 0x00);
+	regmap_write(lt->regmap[1], 0x56, 0xe4);
+	regmap_write(lt->regmap[1], 0x57, 0x0d);
+	regmap_write(lt->regmap[1], 0x58, 0x00);
+	regmap_write(lt->regmap[1], 0x59, 0xe4);
+	regmap_write(lt->regmap[1], 0x5a, 0x8a);
+	regmap_write(lt->regmap[1], 0x5b, 0x00);
+	regmap_write(lt->regmap[1], 0x5c, 0x34);
+	regmap_write(lt->regmap[1], 0x1e, 0x4f);
+	regmap_write(lt->regmap[1], 0x51, 0x00);
+}
+
+static void lt8912_audio_config(struct lt8912 *lt)
+{
+	pr_debug("lt8912_audio_config() called\n");
+
+	regmap_write(lt->regmap[0], 0xb2, 0x01);
+
+	lt->audio_mode = LT8912_AUDIO_NONE;
+
+	switch(lt->audio_mode) {
+		case LT8912_AUDIO_NONE:
+			regmap_write(lt->regmap[2], 0x06, 0x00);
+			regmap_write(lt->regmap[2], 0x07, 0x00);
+			regmap_write(lt->regmap[2], 0x34, 0xd2);
+			regmap_write(lt->regmap[2], 0x3c, 0x41);
+			break;
+		case LT8912_AUDIO_SPDIF:
+			regmap_write(lt->regmap[2], 0x06, 0x0e);
+			regmap_write(lt->regmap[2], 0x07, 0x00);
+			regmap_write(lt->regmap[2], 0x34, 0xD2);
+			break;
+		case LT8912_AUDIO_I2S:
+			regmap_write(lt->regmap[2], 0x08, 0x00);
+			regmap_write(lt->regmap[2], 0x07, 0xf0);
+			regmap_write(lt->regmap[2], 0x0f, 0x28); // Audio 16bit, 48K
+			regmap_write(lt->regmap[2], 0x34, 0xe2); // sclk = 64fs, 0xd2; sclk = 32fs, 0xe2.
+			break;
+	}
+
+}
+
+static void lt8912_mipi_config(struct lt8912 *lt)
+{
+	//const struct drm_display_mode *mode = &lt->mode;
+	struct video_timing *video = &video_1920x1080_30Hz;
+
+	u32 hactive, hfp, hsync, hbp, vfp, vsync, vbp, htotal, vtotal;
+	unsigned int hsync_activehigh, vsync_activehigh, reg;
+
+	pr_debug("lt8912_mipi_config() called\n");
+
+		hactive = video->hact;
+	hfp = video->hfp;
+	hsync = video->hs;
+	hsync_activehigh = hsync_activehigh;
+	hbp = video->hbp;
+	vfp = video->vfp;
+	vsync = video->vs;
+	vsync_activehigh = vsync_activehigh;
+	vbp = video->vbp;
+	htotal = video->htotal;
+	vtotal = video->vtotal;
+
+	/* MIPIDig */
+	regmap_write(lt->regmap[1], 0x10, 0x01); // The analog PHY for trans LP mode to HS mode.
+	regmap_write(lt->regmap[1], 0x11, 0x0a); // The time for DPHY trans state from PRPR to SOT state.
+
+	/* video timing (1:1 from driver developer guide) */
+	regmap_write(lt->regmap[1], 0x18, hsync);
+	regmap_write(lt->regmap[1], 0x19, vsync);
+	regmap_write(lt->regmap[1], 0x1c, hactive % 0x100);
+	regmap_write(lt->regmap[1], 0x1d, hactive >> 8);
+	regmap_write(lt->regmap[1], 0x2f, 0x0c); // This field configures the length of writing to fifo before reading from fifo.
+	regmap_write(lt->regmap[1], 0x34, htotal % 0x100);
+	regmap_write(lt->regmap[1], 0x35, htotal >> 8);
+	regmap_write(lt->regmap[1], 0x36, vtotal % 0x100);
+	regmap_write(lt->regmap[1], 0x37, vtotal >> 8);
+	regmap_write(lt->regmap[1], 0x38, vbp % 0x100);
+	regmap_write(lt->regmap[1], 0x39, vbp >> 8);
+	regmap_write(lt->regmap[1], 0x3a, vfp % 0x100);
+	regmap_write(lt->regmap[1], 0x3b, vfp >> 8);
+	regmap_write(lt->regmap[1], 0x3c, hbp % 0x100);
+	regmap_write(lt->regmap[1], 0x3d, hbp >> 8);
+	regmap_write(lt->regmap[1], 0x3e, hfp % 0x100);
+	regmap_write(lt->regmap[1], 0x3f, hfp >> 8);
+
+	/* set HSYNC and VSYNC polarity */
+	regmap_read(lt->regmap[0], 0xab, &reg);
+	reg &= 0xfc;
+	reg |= (hsync_activehigh < 1) | vsync_activehigh;
+	regmap_write(lt->regmap[0], 0xab, reg);
+}
+
+static void lt8912_configure_lvds(struct lt8912 *lt)
+{
+	pr_debug("lt8912_configure_lvds() called\n");
+
+	//core pll bypass
+	regmap_write(lt->regmap[0], 0x50, 0x24); // cp=50uA
+	regmap_write(lt->regmap[0], 0x51, 0x2d); // Pix_clk as reference,second order passive LPF PLL
+	regmap_write(lt->regmap[0], 0x52, 0x04); // loopdiv=0;use second-order PLL
+	regmap_write(lt->regmap[0], 0x69, 0x0e); // CP_PRESET_DIV_RATIO
+	regmap_write(lt->regmap[0], 0x69, 0x8e);
+	regmap_write(lt->regmap[0], 0x6a, 0x00);
+	regmap_write(lt->regmap[0], 0x6c, 0xb8); // RGD_CP_SOFT_K_EN,RGD_CP_SOFT_K[13:8]
+	regmap_write(lt->regmap[0], 0x6b, 0x51);
+
+	regmap_write(lt->regmap[0], 0x04, 0xfb); // core pll reset
+	regmap_write(lt->regmap[0], 0x04, 0xff);
+
+	//scaler bypass
+	regmap_write(lt->regmap[0], 0x7f, 0x00); // disable scaler
+	regmap_write(lt->regmap[0], 0xa8, 0x13); // 0x13 : JEIDA, 0x33:VSEA  bit[1]:H_HOL, bit[0]:V_HOL,
+
+	regmap_write(lt->regmap[0], 0x02, 0xf7); // lvds pll soft reset
+	regmap_write(lt->regmap[0], 0x02, 0xff);
+	regmap_write(lt->regmap[0], 0x03, 0xcb); // scaler module reset
+	regmap_write(lt->regmap[0], 0x03, 0xfb); // lvds tx module reset
+	regmap_write(lt->regmap[0], 0x03, 0xff);
+
+	regmap_write(lt->regmap[0], 0x44, 0x30); // enable lvds output
+}
+
+/* LT8912 MIPI to HDMI & LVDS REG setting - 20180115.txt */
+static void lt8912_init(struct lt8912 *lt)
+{
+	u8 lanes = 2; //lt->dsi->lanes;
+	//const struct drm_display_mode *mode = &lt->mode;
+	unsigned int version[2];
+
+	pr_debug("lt8912_init() called\n");
+
+	gpiod_direction_output(lt->reset_n, 1);
+	msleep(120);
+	gpiod_direction_output(lt->reset_n, 0);
+	msleep(120);
+
+	regmap_read(lt->regmap[0], 0x00, &version[0]); // Higher byte of the chip ID
+	regmap_read(lt->regmap[0], 0x01, &version[1]); // Lower byte of the chip ID
+
+	/* DigitalClockEn (1:1 from driver developer guide) */
+	regmap_write(lt->regmap[0], 0x08, 0xff);
+	regmap_write(lt->regmap[0], 0x09, 0xff);
+	regmap_write(lt->regmap[0], 0x0a, 0xff);
+	regmap_write(lt->regmap[0], 0x0b, 0x7c);
+	regmap_write(lt->regmap[0], 0x0c, 0xff);
+
+	/* TxAnalog (1:1 from driver developer guide) */
+	//if(!lt->lvds_mode) {
+	if (true) {
+		pr_debug("lt8912_init(): not in lvds mode\n");
+
+		regmap_write(lt->regmap[0], 0x31, 0xa1);
+		regmap_write(lt->regmap[0], 0x32, 0xa1);
+		regmap_write(lt->regmap[0], 0x33, 0x03);
+		regmap_write(lt->regmap[0], 0x37, 0x00);
+		regmap_write(lt->regmap[0], 0x38, 0x22);
+		regmap_write(lt->regmap[0], 0x60, 0x82);
+	}
+	/* CbusAnalog (register 0x3a not mentioned in driver developer guide and register description) */
+	regmap_write(lt->regmap[0], 0x39, 0x45);
+	regmap_write(lt->regmap[0], 0x3a, 0x00);
+	regmap_write(lt->regmap[0], 0x3b, 0x00);
+
+	/* HDMIPllAnalog (1:1 from driver developer guide) */
+	regmap_write(lt->regmap[0], 0x44, 0x31);
+	regmap_write(lt->regmap[0], 0x55, 0x44);
+	regmap_write(lt->regmap[0], 0x57, 0x01);
+	regmap_write(lt->regmap[0], 0x5a, 0x02);
+
+	/* MIPIAnalog */
+	if(lt->swap_mipi_pn) {
+		pr_debug("lt8912_init(): MIPI P/N lines swapped\n");
+
+		// P/N mipi lines are swapped, lp rx trigger point 700mV
+		regmap_write(lt->regmap[0], 0x3e, 0xf6); 
+	} else {
+		pr_debug("lt8912_init(): MIPI P/N lines NOT swapped\n");
+
+		// P/N mipi lines not swapped, lp rx trigger point 500mV
+		regmap_write(lt->regmap[0], 0x3e, 0xce); 
+	}
+	regmap_write(lt->regmap[0], 0x3f, 0xd4);
+	regmap_write(lt->regmap[0], 0x41, 0x3c);
+
+	/* MipiBasicSet (0x10, 0x11 handled in lt8912_mipi_config(), rest 1:1 from driver developer guide) */
+	regmap_write(lt->regmap[1], 0x12, 0x04);
+	regmap_write(lt->regmap[1], 0x13, lanes % 4);
+	regmap_write(lt->regmap[1], 0x14, 0x00);
+	regmap_write(lt->regmap[1], 0x15, 0x00);
+	regmap_write(lt->regmap[1], 0x1a, 0x03);
+	regmap_write(lt->regmap[1], 0x1b, 0x03);
+
+	lt8912_mipi_config(lt);
+
+	lt8912_dds_config(lt);
+
+	lt8912_audio_config(lt);
+
+	/* MIPIRxLogicRes (1:1 from driver developer guide) */
+	regmap_write(lt->regmap[0], 0x03, 0x7f);
+	usleep_range(10000, 20000);
+	regmap_write(lt->regmap[0], 0x03, 0xff);
+
+
+	regmap_write(lt->regmap[1], 0x51, 0x80);
+	usleep_range(10000, 20000);
+	regmap_write(lt->regmap[1], 0x51, 0x00);
+
+	//if(lt->lvds_mode){
+	if (false) {
+		pr_debug("lt8912_init(): configure lvds mode\n");
+
+		lt8912_configure_lvds(lt);
+	}
+
+	// 19.05.2022 bie
+	//regmap_write(lt->regmap[0], 0x7f, 0x00);//disable scaler
+}
+
+static void lt8912_wakeup(struct lt8912 *lt)
+{
+	pr_debug("lt8912_wakeup() called\n");
+
+/*
+	gpiod_direction_output(lt->reset_n, 1);
+	msleep(120);
+	gpiod_direction_output(lt->reset_n, 0);
+	msleep(120);
+*/
+
+	regmap_write(lt->regmap[0], 0x08, 0xff); /* enable clk gating */
+	regmap_write(lt->regmap[0], 0x41, 0x3c); /* MIPI Rx Power On */
+	regmap_write(lt->regmap[0], 0x05, 0xfb); /* DDS logical reset */
+	regmap_write(lt->regmap[0], 0x05, 0xff);
+	regmap_write(lt->regmap[0], 0x03, 0x7f); /* MIPI RX logical reset */
+	usleep_range(10000, 20000);
+	regmap_write(lt->regmap[0], 0x03, 0xff);
+	regmap_write(lt->regmap[0], 0x32, 0xa1);
+
+	// 20.05.22 bie
+	regmap_write(lt->regmap[0], 0x33, 0x03);
+}
+
+static void lt8912_sleep(struct lt8912 *lt)
+{
+	pr_debug("lt8912_sleep() called\n");
+
+	regmap_write(lt->regmap[0], 0x32, 0xa0);
+	regmap_write(lt->regmap[0], 0x33, 0x00); /* Disable HDMI output. */
+	regmap_write(lt->regmap[0], 0x41, 0x3d); /* MIPI Rx Power Down. */
+	regmap_write(lt->regmap[0], 0x08, 0x00); /* diable DDS clk. */
+	regmap_write(lt->regmap[0], 0x44, 0x00); // disable lvds output
+
+	gpiod_direction_output(lt->reset_n, 1);
+}
+
+
+static int lt8912_bridge_suspend(struct device *dev)
+{
+	struct lt8912 *lt8912 = dev_get_drvdata(dev);
+	lt8912_sleep(lt8912);
+	return 0;
+}
+
+
+static int lt8912_bridge_resume(struct device *dev)
+{
+	struct lt8912 *lt8912 = dev_get_drvdata(dev);
+	lt8912_wakeup(lt8912);
+	return 0;
+}
+
+
+static SIMPLE_DEV_PM_OPS(lt8912_bridge_pm_ops,
+			 lt8912_bridge_suspend,
+			 lt8912_bridge_resume);
+
+
+static void lt8912_audio_enable(struct lt8912 *lt8912)
+{
+}
+
+
+static void lt8912_audio_disable(struct lt8912 *lt8912)
+{
+}
+
+
+static ssize_t audio_show(struct device *dev, struct device_attribute *attr, char *buf)
+{
+	char *s= buf;
+    int len;
+	struct lt8912 *lt8912 = dev_get_drvdata(dev);
+
+	pr_debug("audio_show() called\n");
+
+	if (lt8912->audio_status){
+		s += sprintf(s, "%s\n", STRING_ON);
+	} else {
+        s += sprintf(s,"%s\n", STRING_OFF);
+	}
+
+	if (s != buf)
+   	{
+		*(s-1) = '\n';
+    }
+    
+    len = (s - buf);
+
+	return len;
+}
+ 
+static ssize_t audio_store(struct device *dev, struct device_attribute *attr, const char *buf, size_t count)
+{
+	char *p;
+	int len;
+	struct lt8912 *lt8912 = dev_get_drvdata(dev);
+
+	pr_debug("audio_store() called\n");
+
+    p = memchr(buf, '\n', count);
+	len = p ? p - buf : count;   
+
+	if (!strncmp(buf, STRING_ON, len )) {
+        lt8912->audio_status = 1;
+		lt8912_audio_enable(lt8912);
+    }
+    else if (!strncmp(buf, STRING_OFF, len )) {
+        lt8912->audio_status = 0;
+		lt8912_audio_disable(lt8912);
+    }
+
+	return count;
+}
+
+static DEVICE_ATTR(audio, 0664, audio_show, audio_store);
+
+
+static const struct regmap_config lt8912_regmap_config = {
+	.reg_bits = 8,
+	.val_bits = 8,
+	.max_register = 0xff,
+};
+
+
+static int lt8912_i2c_init(struct lt8912 *lt,
+			   struct i2c_client *client)
+{
+	struct i2c_board_info info[] = {
+		{ I2C_BOARD_INFO("lt8912p0", 0x48), },
+		{ I2C_BOARD_INFO("lt8912p1", 0x49), },
+		{ I2C_BOARD_INFO("lt8912p2", 0x4a), }
+	};
+	struct regmap *regmap;
+	unsigned int i;
+	int ret;
+
+	if (!lt || !client)
+		return -ENODEV;
+
+	for (i = 0; i < ARRAY_SIZE(info); i++) {
+		if (i > 0 ) {
+			client = i2c_new_dummy_device(client->adapter, info[i].addr);
+			if (!client)
+				return -ENODEV;
+		}
+		regmap = devm_regmap_init_i2c(client, &lt8912_regmap_config);
+		if (IS_ERR(regmap)) {
+			ret = PTR_ERR(regmap);
+			pr_debug("lt8912_i2c_init(): failed to initialize regmap %d\n", ret);
+			return ret;
+		}
+
+		lt->regmap[i] = regmap;
+	}
+
+	return 0;
+}
+
+
+static int lt8912_probe(struct i2c_client *client, const struct i2c_device_id *id)
+{
+	struct device *dev = &client->dev;
+    int ret;
+    struct lt8912 *lt8912;
+
+	pr_debug("lt8912_probe() called\n");
+
+    printk("ADLINK ,LT8912 DRIVER \n");	
+	lt8912 = devm_kzalloc(dev, sizeof(*lt8912), GFP_KERNEL);
+	if (!lt8912) {
+		dev_err(dev, "failed to alloc memory\n");
+		printk("ADLINK :%s failed to alloc memory \n",__func__);
+		return -ENOMEM;
+	}
+	dev_set_drvdata(dev, lt8912);
+
+	
+	lt8912->reset_n = devm_gpiod_get(dev, "reset", GPIOD_ASIS);
+	if (IS_ERR(lt8912->reset_n)) {
+		ret = PTR_ERR(lt8912->reset_n);
+        printk("ADLINK :%s failed to request reset GPIO \n",__func__);
+
+		dev_err(dev, "failed to request reset GPIO: %d\n", ret);
+		return ret;
+	}
+
+	lt8912->swap_mipi_pn = of_property_read_bool(dev->of_node, "swap-mipi-pn");
+
+	ret = lt8912_i2c_init(lt8912, client);
+	if (ret)
+		return ret;
+
+    ret = device_create_file(dev, &dev_attr_audio);
+	if (ret < 0) {
+		dev_err(dev, "failed to create attribute file\n");
+        printk("ADLINK :%s failed to create attribute \n",__func__);
+
+		return ret;
+	}
+ 
+	lt8912_init(lt8912);
+	lt8912_wakeup(lt8912);
+
+    return 0;
+}
+
+
+static int lt8912_remove(struct i2c_client *client)
+{
+	pr_debug("lt8912_remove() called\n");
+	return 0;
+}
+
+
+static struct i2c_device_id lt8912_id[] = {
+	{ "lt8912", 0 },
+	{}
+};
+
+
+static const struct of_device_id lt8912_match_table[] = {
+	{ .compatible = "lontium,lt8912" },
+	{}
+};
+
+MODULE_DEVICE_TABLE(of, lt8912_match_table);
+
+static struct i2c_driver lt8912_driver = {
+	.driver				= {
+		.name			= "lt8912",
+		.owner			= THIS_MODULE,
+		.of_match_table = lt8912_match_table,
+		.pm				= &lt8912_bridge_pm_ops,
+	},
+    .probe			= lt8912_probe,
+	.remove			= lt8912_remove,
+	.id_table		= lt8912_id,
+};
+
+
+static int __init lt8912_i2c_drv_init(void)
+{
+	pr_debug("lt8912_init() called\n");
+	return i2c_add_driver(&lt8912_driver);
+}
+
+
+static void __exit lt8912_i2c_drv_exit(void)
+{
+	pr_debug("lt8912_exit() called\n");
+	i2c_del_driver(&lt8912_driver);
+}
+
+
+module_init(lt8912_i2c_drv_init);
+module_exit(lt8912_i2c_drv_exit);
+
+MODULE_AUTHOR("bie@iesy.com");
+MODULE_DESCRIPTION("Lontium bridge IC LT8912 integrated as i2c-only driver");
+MODULE_LICENSE("GPL");
-- 
2.30.2

